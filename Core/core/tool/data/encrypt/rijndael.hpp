#pragma once

// TODO !!!

// NOTE
// 此页代码并不是真正的Rijndael算法，而是用于PvZ-2-C中RTON加/解密的实现，其使用192位Rijndael-CBC算法进行RTON的加/解密
// 此页代码是对PvZ-2-C中libSrc.so的逆向产物（经过一定整理），只保证与PvZ-2-C的逻辑（CBC-192）相同，未来应考虑使用第三方库替代
// Rijndael-CBC reverse from libSrc.so (android-egame-2.3.95)

#include "core/utility/utility.hpp"

namespace TwinKleS::Core::Tool::Data::Encrypt::Rijndael {

	inline namespace Common {

		namespace Detail {

			#pragma region parameter

			// 2359EB0 ~ 32 * 1 = 32 bytes
			inline constexpr ZArray<IntegerU8, 32_szz> k_box_8_a = {
				0x01_iu8, 0x02_iu8, 0x04_iu8, 0x08_iu8, 0x10_iu8, 0x20_iu8, 0x40_iu8, 0x80_iu8,
				0x1B_iu8, 0x36_iu8, 0x6C_iu8, 0xD8_iu8, 0xAB_iu8, 0x4D_iu8, 0x9A_iu8, 0x2F_iu8,
				0x5E_iu8, 0xBC_iu8, 0x63_iu8, 0xC6_iu8, 0x97_iu8, 0x35_iu8, 0x6A_iu8, 0xD4_iu8,
				0xB3_iu8, 0x7D_iu8, 0xFA_iu8, 0xEF_iu8, 0xC5_iu8, 0x91_iu8, 0x00_iu8, 0x00_iu8,
			};

			// 2359DB0 ~ 256 * 1 = 256 bytes
			inline constexpr ZArray<IntegerU8, 256_szz> k_box_8_b = {
				0x63_iu8, 0x7C_iu8, 0x77_iu8, 0x7B_iu8, 0xF2_iu8, 0x6B_iu8, 0x6F_iu8, 0xC5_iu8,
				0x30_iu8, 0x01_iu8, 0x67_iu8, 0x2B_iu8, 0xFE_iu8, 0xD7_iu8, 0xAB_iu8, 0x76_iu8,
				0xCA_iu8, 0x82_iu8, 0xC9_iu8, 0x7D_iu8, 0xFA_iu8, 0x59_iu8, 0x47_iu8, 0xF0_iu8,
				0xAD_iu8, 0xD4_iu8, 0xA2_iu8, 0xAF_iu8, 0x9C_iu8, 0xA4_iu8, 0x72_iu8, 0xC0_iu8,
				0xB7_iu8, 0xFD_iu8, 0x93_iu8, 0x26_iu8, 0x36_iu8, 0x3F_iu8, 0xF7_iu8, 0xCC_iu8,
				0x34_iu8, 0xA5_iu8, 0xE5_iu8, 0xF1_iu8, 0x71_iu8, 0xD8_iu8, 0x31_iu8, 0x15_iu8,
				0x04_iu8, 0xC7_iu8, 0x23_iu8, 0xC3_iu8, 0x18_iu8, 0x96_iu8, 0x05_iu8, 0x9A_iu8,
				0x07_iu8, 0x12_iu8, 0x80_iu8, 0xE2_iu8, 0xEB_iu8, 0x27_iu8, 0xB2_iu8, 0x75_iu8,
				0x09_iu8, 0x83_iu8, 0x2C_iu8, 0x1A_iu8, 0x1B_iu8, 0x6E_iu8, 0x5A_iu8, 0xA0_iu8,
				0x52_iu8, 0x3B_iu8, 0xD6_iu8, 0xB3_iu8, 0x29_iu8, 0xE3_iu8, 0x2F_iu8, 0x84_iu8,
				0x53_iu8, 0xD1_iu8, 0x00_iu8, 0xED_iu8, 0x20_iu8, 0xFC_iu8, 0xB1_iu8, 0x5B_iu8,
				0x6A_iu8, 0xCB_iu8, 0xBE_iu8, 0x39_iu8, 0x4A_iu8, 0x4C_iu8, 0x58_iu8, 0xCF_iu8,
				0xD0_iu8, 0xEF_iu8, 0xAA_iu8, 0xFB_iu8, 0x43_iu8, 0x4D_iu8, 0x33_iu8, 0x85_iu8,
				0x45_iu8, 0xF9_iu8, 0x02_iu8, 0x7F_iu8, 0x50_iu8, 0x3C_iu8, 0x9F_iu8, 0xA8_iu8,
				0x51_iu8, 0xA3_iu8, 0x40_iu8, 0x8F_iu8, 0x92_iu8, 0x9D_iu8, 0x38_iu8, 0xF5_iu8,
				0xBC_iu8, 0xB6_iu8, 0xDA_iu8, 0x21_iu8, 0x10_iu8, 0xFF_iu8, 0xF3_iu8, 0xD2_iu8,
				0xCD_iu8, 0x0C_iu8, 0x13_iu8, 0xEC_iu8, 0x5F_iu8, 0x97_iu8, 0x44_iu8, 0x17_iu8,
				0xC4_iu8, 0xA7_iu8, 0x7E_iu8, 0x3D_iu8, 0x64_iu8, 0x5D_iu8, 0x19_iu8, 0x73_iu8,
				0x60_iu8, 0x81_iu8, 0x4F_iu8, 0xDC_iu8, 0x22_iu8, 0x2A_iu8, 0x90_iu8, 0x88_iu8,
				0x46_iu8, 0xEE_iu8, 0xB8_iu8, 0x14_iu8, 0xDE_iu8, 0x5E_iu8, 0x0B_iu8, 0xDB_iu8,
				0xE0_iu8, 0x32_iu8, 0x3A_iu8, 0x0A_iu8, 0x49_iu8, 0x06_iu8, 0x24_iu8, 0x5C_iu8,
				0xC2_iu8, 0xD3_iu8, 0xAC_iu8, 0x62_iu8, 0x91_iu8, 0x95_iu8, 0xE4_iu8, 0x79_iu8,
				0xE7_iu8, 0xC8_iu8, 0x37_iu8, 0x6D_iu8, 0x8D_iu8, 0xD5_iu8, 0x4E_iu8, 0xA9_iu8,
				0x6C_iu8, 0x56_iu8, 0xF4_iu8, 0xEA_iu8, 0x65_iu8, 0x7A_iu8, 0xAE_iu8, 0x08_iu8,
				0xBA_iu8, 0x78_iu8, 0x25_iu8, 0x2E_iu8, 0x1C_iu8, 0xA6_iu8, 0xB4_iu8, 0xC6_iu8,
				0xE8_iu8, 0xDD_iu8, 0x74_iu8, 0x1F_iu8, 0x4B_iu8, 0xBD_iu8, 0x8B_iu8, 0x8A_iu8,
				0x70_iu8, 0x3E_iu8, 0xB5_iu8, 0x66_iu8, 0x48_iu8, 0x03_iu8, 0xF6_iu8, 0x0E_iu8,
				0x61_iu8, 0x35_iu8, 0x57_iu8, 0xB9_iu8, 0x86_iu8, 0xC1_iu8, 0x1D_iu8, 0x9E_iu8,
				0xE1_iu8, 0xF8_iu8, 0x98_iu8, 0x11_iu8, 0x69_iu8, 0xD9_iu8, 0x8E_iu8, 0x94_iu8,
				0x9B_iu8, 0x1E_iu8, 0x87_iu8, 0xE9_iu8, 0xCE_iu8, 0x55_iu8, 0x28_iu8, 0xDF_iu8,
				0x8C_iu8, 0xA1_iu8, 0x89_iu8, 0x0D_iu8, 0xBF_iu8, 0xE6_iu8, 0x42_iu8, 0x68_iu8,
				0x41_iu8, 0x99_iu8, 0x2D_iu8, 0x0F_iu8, 0xB0_iu8, 0x54_iu8, 0xBB_iu8, 0x16_iu8,
			};

			// 235CED0 ~ 256 * 1 = 256 bytes
			inline constexpr ZArray<IntegerU8, 256_szz> k_box_8_c = {
				0x52_iu8, 0x09_iu8, 0x6A_iu8, 0xD5_iu8, 0x30_iu8, 0x36_iu8, 0xA5_iu8, 0x38_iu8,
				0xBF_iu8, 0x40_iu8, 0xA3_iu8, 0x9E_iu8, 0x81_iu8, 0xF3_iu8, 0xD7_iu8, 0xFB_iu8,
				0x7C_iu8, 0xE3_iu8, 0x39_iu8, 0x82_iu8, 0x9B_iu8, 0x2F_iu8, 0xFF_iu8, 0x87_iu8,
				0x34_iu8, 0x8E_iu8, 0x43_iu8, 0x44_iu8, 0xC4_iu8, 0xDE_iu8, 0xE9_iu8, 0xCB_iu8,
				0x54_iu8, 0x7B_iu8, 0x94_iu8, 0x32_iu8, 0xA6_iu8, 0xC2_iu8, 0x23_iu8, 0x3D_iu8,
				0xEE_iu8, 0x4C_iu8, 0x95_iu8, 0x0B_iu8, 0x42_iu8, 0xFA_iu8, 0xC3_iu8, 0x4E_iu8,
				0x08_iu8, 0x2E_iu8, 0xA1_iu8, 0x66_iu8, 0x28_iu8, 0xD9_iu8, 0x24_iu8, 0xB2_iu8,
				0x76_iu8, 0x5B_iu8, 0xA2_iu8, 0x49_iu8, 0x6D_iu8, 0x8B_iu8, 0xD1_iu8, 0x25_iu8,
				0x72_iu8, 0xF8_iu8, 0xF6_iu8, 0x64_iu8, 0x86_iu8, 0x68_iu8, 0x98_iu8, 0x16_iu8,
				0xD4_iu8, 0xA4_iu8, 0x5C_iu8, 0xCC_iu8, 0x5D_iu8, 0x65_iu8, 0xB6_iu8, 0x92_iu8,
				0x6C_iu8, 0x70_iu8, 0x48_iu8, 0x50_iu8, 0xFD_iu8, 0xED_iu8, 0xB9_iu8, 0xDA_iu8,
				0x5E_iu8, 0x15_iu8, 0x46_iu8, 0x57_iu8, 0xA7_iu8, 0x8D_iu8, 0x9D_iu8, 0x84_iu8,
				0x90_iu8, 0xD8_iu8, 0xAB_iu8, 0x00_iu8, 0x8C_iu8, 0xBC_iu8, 0xD3_iu8, 0x0A_iu8,
				0xF7_iu8, 0xE4_iu8, 0x58_iu8, 0x05_iu8, 0xB8_iu8, 0xB3_iu8, 0x45_iu8, 0x06_iu8,
				0xD0_iu8, 0x2C_iu8, 0x1E_iu8, 0x8F_iu8, 0xCA_iu8, 0x3F_iu8, 0x0F_iu8, 0x02_iu8,
				0xC1_iu8, 0xAF_iu8, 0xBD_iu8, 0x03_iu8, 0x01_iu8, 0x13_iu8, 0x8A_iu8, 0x6B_iu8,
				0x3A_iu8, 0x91_iu8, 0x11_iu8, 0x41_iu8, 0x4F_iu8, 0x67_iu8, 0xDC_iu8, 0xEA_iu8,
				0x97_iu8, 0xF2_iu8, 0xCF_iu8, 0xCE_iu8, 0xF0_iu8, 0xB4_iu8, 0xE6_iu8, 0x73_iu8,
				0x96_iu8, 0xAC_iu8, 0x74_iu8, 0x22_iu8, 0xE7_iu8, 0xAD_iu8, 0x35_iu8, 0x85_iu8,
				0xE2_iu8, 0xF9_iu8, 0x37_iu8, 0xE8_iu8, 0x1C_iu8, 0x75_iu8, 0xDF_iu8, 0x6E_iu8,
				0x47_iu8, 0xF1_iu8, 0x1A_iu8, 0x71_iu8, 0x1D_iu8, 0x29_iu8, 0xC5_iu8, 0x89_iu8,
				0x6F_iu8, 0xB7_iu8, 0x62_iu8, 0x0E_iu8, 0xAA_iu8, 0x18_iu8, 0xBE_iu8, 0x1B_iu8,
				0xFC_iu8, 0x56_iu8, 0x3E_iu8, 0x4B_iu8, 0xC6_iu8, 0xD2_iu8, 0x79_iu8, 0x20_iu8,
				0x9A_iu8, 0xDB_iu8, 0xC0_iu8, 0xFE_iu8, 0x78_iu8, 0xCD_iu8, 0x5A_iu8, 0xF4_iu8,
				0x1F_iu8, 0xDD_iu8, 0xA8_iu8, 0x33_iu8, 0x88_iu8, 0x07_iu8, 0xC7_iu8, 0x31_iu8,
				0xB1_iu8, 0x12_iu8, 0x10_iu8, 0x59_iu8, 0x27_iu8, 0x80_iu8, 0xEC_iu8, 0x5F_iu8,
				0x60_iu8, 0x51_iu8, 0x7F_iu8, 0xA9_iu8, 0x19_iu8, 0xB5_iu8, 0x4A_iu8, 0x0D_iu8,
				0x2D_iu8, 0xE5_iu8, 0x7A_iu8, 0x9F_iu8, 0x93_iu8, 0xC9_iu8, 0x9C_iu8, 0xEF_iu8,
				0xA0_iu8, 0xE0_iu8, 0x3B_iu8, 0x4D_iu8, 0xAE_iu8, 0x2A_iu8, 0xF5_iu8, 0xB0_iu8,
				0xC8_iu8, 0xEB_iu8, 0xBB_iu8, 0x3C_iu8, 0x83_iu8, 0x53_iu8, 0x99_iu8, 0x61_iu8,
				0x17_iu8, 0x2B_iu8, 0x04_iu8, 0x7E_iu8, 0xBA_iu8, 0x77_iu8, 0xD6_iu8, 0x26_iu8,
				0xE1_iu8, 0x69_iu8, 0x14_iu8, 0x63_iu8, 0x55_iu8, 0x21_iu8, 0x0C_iu8, 0x7D_iu8,
			};

			// ----------------

			// 0x2359ED0 ~ 256 * 4 * 4 = 4096 bytes
			inline constexpr ZArray<ZArray<IntegerU32, 256_szz>, 4_szz> k_box_32_a = {
				{
					0x00000000_iu32, 0x0B0E090D_iu32, 0x161C121A_iu32, 0x1D121B17_iu32, 0x2C382434_iu32, 0x27362D39_iu32, 0x3A24362E_iu32, 0x312A3F23_iu32,
					0x58704868_iu32, 0x537E4165_iu32, 0x4E6C5A72_iu32, 0x4562537F_iu32, 0x74486C5C_iu32, 0x7F466551_iu32, 0x62547E46_iu32, 0x695A774B_iu32,
					0xB0E090D0_iu32, 0xBBEE99DD_iu32, 0xA6FC82CA_iu32, 0xADF28BC7_iu32, 0x9CD8B4E4_iu32, 0x97D6BDE9_iu32, 0x8AC4A6FE_iu32, 0x81CAAFF3_iu32,
					0xE890D8B8_iu32, 0xE39ED1B5_iu32, 0xFE8CCAA2_iu32, 0xF582C3AF_iu32, 0xC4A8FC8C_iu32, 0xCFA6F581_iu32, 0xD2B4EE96_iu32, 0xD9BAE79B_iu32,
					0x7BDB3BBB_iu32, 0x70D532B6_iu32, 0x6DC729A1_iu32, 0x66C920AC_iu32, 0x57E31F8F_iu32, 0x5CED1682_iu32, 0x41FF0D95_iu32, 0x4AF10498_iu32,
					0x23AB73D3_iu32, 0x28A57ADE_iu32, 0x35B761C9_iu32, 0x3EB968C4_iu32, 0x0F9357E7_iu32, 0x049D5EEA_iu32, 0x198F45FD_iu32, 0x12814CF0_iu32,
					0xCB3BAB6B_iu32, 0xC035A266_iu32, 0xDD27B971_iu32, 0xD629B07C_iu32, 0xE7038F5F_iu32, 0xEC0D8652_iu32, 0xF11F9D45_iu32, 0xFA119448_iu32,
					0x934BE303_iu32, 0x9845EA0E_iu32, 0x8557F119_iu32, 0x8E59F814_iu32, 0xBF73C737_iu32, 0xB47DCE3A_iu32, 0xA96FD52D_iu32, 0xA261DC20_iu32,
					0xF6AD766D_iu32, 0xFDA37F60_iu32, 0xE0B16477_iu32, 0xEBBF6D7A_iu32, 0xDA955259_iu32, 0xD19B5B54_iu32, 0xCC894043_iu32, 0xC787494E_iu32,
					0xAEDD3E05_iu32, 0xA5D33708_iu32, 0xB8C12C1F_iu32, 0xB3CF2512_iu32, 0x82E51A31_iu32, 0x89EB133C_iu32, 0x94F9082B_iu32, 0x9FF70126_iu32,
					0x464DE6BD_iu32, 0x4D43EFB0_iu32, 0x5051F4A7_iu32, 0x5B5FFDAA_iu32, 0x6A75C289_iu32, 0x617BCB84_iu32, 0x7C69D093_iu32, 0x7767D99E_iu32,
					0x1E3DAED5_iu32, 0x1533A7D8_iu32, 0x0821BCCF_iu32, 0x032FB5C2_iu32, 0x32058AE1_iu32, 0x390B83EC_iu32, 0x241998FB_iu32, 0x2F1791F6_iu32,
					0x8D764DD6_iu32, 0x867844DB_iu32, 0x9B6A5FCC_iu32, 0x906456C1_iu32, 0xA14E69E2_iu32, 0xAA4060EF_iu32, 0xB7527BF8_iu32, 0xBC5C72F5_iu32,
					0xD50605BE_iu32, 0xDE080CB3_iu32, 0xC31A17A4_iu32, 0xC8141EA9_iu32, 0xF93E218A_iu32, 0xF2302887_iu32, 0xEF223390_iu32, 0xE42C3A9D_iu32,
					0x3D96DD06_iu32, 0x3698D40B_iu32, 0x2B8ACF1C_iu32, 0x2084C611_iu32, 0x11AEF932_iu32, 0x1AA0F03F_iu32, 0x07B2EB28_iu32, 0x0CBCE225_iu32,
					0x65E6956E_iu32, 0x6EE89C63_iu32, 0x73FA8774_iu32, 0x78F48E79_iu32, 0x49DEB15A_iu32, 0x42D0B857_iu32, 0x5FC2A340_iu32, 0x54CCAA4D_iu32,
					0xF741ECDA_iu32, 0xFC4FE5D7_iu32, 0xE15DFEC0_iu32, 0xEA53F7CD_iu32, 0xDB79C8EE_iu32, 0xD077C1E3_iu32, 0xCD65DAF4_iu32, 0xC66BD3F9_iu32,
					0xAF31A4B2_iu32, 0xA43FADBF_iu32, 0xB92DB6A8_iu32, 0xB223BFA5_iu32, 0x83098086_iu32, 0x8807898B_iu32, 0x9515929C_iu32, 0x9E1B9B91_iu32,
					0x47A17C0A_iu32, 0x4CAF7507_iu32, 0x51BD6E10_iu32, 0x5AB3671D_iu32, 0x6B99583E_iu32, 0x60975133_iu32, 0x7D854A24_iu32, 0x768B4329_iu32,
					0x1FD13462_iu32, 0x14DF3D6F_iu32, 0x09CD2678_iu32, 0x02C32F75_iu32, 0x33E91056_iu32, 0x38E7195B_iu32, 0x25F5024C_iu32, 0x2EFB0B41_iu32,
					0x8C9AD761_iu32, 0x8794DE6C_iu32, 0x9A86C57B_iu32, 0x9188CC76_iu32, 0xA0A2F355_iu32, 0xABACFA58_iu32, 0xB6BEE14F_iu32, 0xBDB0E842_iu32,
					0xD4EA9F09_iu32, 0xDFE49604_iu32, 0xC2F68D13_iu32, 0xC9F8841E_iu32, 0xF8D2BB3D_iu32, 0xF3DCB230_iu32, 0xEECEA927_iu32, 0xE5C0A02A_iu32,
					0x3C7A47B1_iu32, 0x37744EBC_iu32, 0x2A6655AB_iu32, 0x21685CA6_iu32, 0x10426385_iu32, 0x1B4C6A88_iu32, 0x065E719F_iu32, 0x0D507892_iu32,
					0x640A0FD9_iu32, 0x6F0406D4_iu32, 0x72161DC3_iu32, 0x791814CE_iu32, 0x48322BED_iu32, 0x433C22E0_iu32, 0x5E2E39F7_iu32, 0x552030FA_iu32,
					0x01EC9AB7_iu32, 0x0AE293BA_iu32, 0x17F088AD_iu32, 0x1CFE81A0_iu32, 0x2DD4BE83_iu32, 0x26DAB78E_iu32, 0x3BC8AC99_iu32, 0x30C6A594_iu32,
					0x599CD2DF_iu32, 0x5292DBD2_iu32, 0x4F80C0C5_iu32, 0x448EC9C8_iu32, 0x75A4F6EB_iu32, 0x7EAAFFE6_iu32, 0x63B8E4F1_iu32, 0x68B6EDFC_iu32,
					0xB10C0A67_iu32, 0xBA02036A_iu32, 0xA710187D_iu32, 0xAC1E1170_iu32, 0x9D342E53_iu32, 0x963A275E_iu32, 0x8B283C49_iu32, 0x80263544_iu32,
					0xE97C420F_iu32, 0xE2724B02_iu32, 0xFF605015_iu32, 0xF46E5918_iu32, 0xC544663B_iu32, 0xCE4A6F36_iu32, 0xD3587421_iu32, 0xD8567D2C_iu32,
					0x7A37A10C_iu32, 0x7139A801_iu32, 0x6C2BB316_iu32, 0x6725BA1B_iu32, 0x560F8538_iu32, 0x5D018C35_iu32, 0x40139722_iu32, 0x4B1D9E2F_iu32,
					0x2247E964_iu32, 0x2949E069_iu32, 0x345BFB7E_iu32, 0x3F55F273_iu32, 0x0E7FCD50_iu32, 0x0571C45D_iu32, 0x1863DF4A_iu32, 0x136DD647_iu32,
					0xCAD731DC_iu32, 0xC1D938D1_iu32, 0xDCCB23C6_iu32, 0xD7C52ACB_iu32, 0xE6EF15E8_iu32, 0xEDE11CE5_iu32, 0xF0F307F2_iu32, 0xFBFD0EFF_iu32,
					0x92A779B4_iu32, 0x99A970B9_iu32, 0x84BB6BAE_iu32, 0x8FB562A3_iu32, 0xBE9F5D80_iu32, 0xB591548D_iu32, 0xA8834F9A_iu32, 0xA38D4697_iu32,
				},
				{
					0x00000000_iu32, 0x0D0B0E09_iu32, 0x1A161C12_iu32, 0x171D121B_iu32, 0x342C3824_iu32, 0x3927362D_iu32, 0x2E3A2436_iu32, 0x23312A3F_iu32,
					0x68587048_iu32, 0x65537E41_iu32, 0x724E6C5A_iu32, 0x7F456253_iu32, 0x5C74486C_iu32, 0x517F4665_iu32, 0x4662547E_iu32, 0x4B695A77_iu32,
					0xD0B0E090_iu32, 0xDDBBEE99_iu32, 0xCAA6FC82_iu32, 0xC7ADF28B_iu32, 0xE49CD8B4_iu32, 0xE997D6BD_iu32, 0xFE8AC4A6_iu32, 0xF381CAAF_iu32,
					0xB8E890D8_iu32, 0xB5E39ED1_iu32, 0xA2FE8CCA_iu32, 0xAFF582C3_iu32, 0x8CC4A8FC_iu32, 0x81CFA6F5_iu32, 0x96D2B4EE_iu32, 0x9BD9BAE7_iu32,
					0xBB7BDB3B_iu32, 0xB670D532_iu32, 0xA16DC729_iu32, 0xAC66C920_iu32, 0x8F57E31F_iu32, 0x825CED16_iu32, 0x9541FF0D_iu32, 0x984AF104_iu32,
					0xD323AB73_iu32, 0xDE28A57A_iu32, 0xC935B761_iu32, 0xC43EB968_iu32, 0xE70F9357_iu32, 0xEA049D5E_iu32, 0xFD198F45_iu32, 0xF012814C_iu32,
					0x6BCB3BAB_iu32, 0x66C035A2_iu32, 0x71DD27B9_iu32, 0x7CD629B0_iu32, 0x5FE7038F_iu32, 0x52EC0D86_iu32, 0x45F11F9D_iu32, 0x48FA1194_iu32,
					0x03934BE3_iu32, 0x0E9845EA_iu32, 0x198557F1_iu32, 0x148E59F8_iu32, 0x37BF73C7_iu32, 0x3AB47DCE_iu32, 0x2DA96FD5_iu32, 0x20A261DC_iu32,
					0x6DF6AD76_iu32, 0x60FDA37F_iu32, 0x77E0B164_iu32, 0x7AEBBF6D_iu32, 0x59DA9552_iu32, 0x54D19B5B_iu32, 0x43CC8940_iu32, 0x4EC78749_iu32,
					0x05AEDD3E_iu32, 0x08A5D337_iu32, 0x1FB8C12C_iu32, 0x12B3CF25_iu32, 0x3182E51A_iu32, 0x3C89EB13_iu32, 0x2B94F908_iu32, 0x269FF701_iu32,
					0xBD464DE6_iu32, 0xB04D43EF_iu32, 0xA75051F4_iu32, 0xAA5B5FFD_iu32, 0x896A75C2_iu32, 0x84617BCB_iu32, 0x937C69D0_iu32, 0x9E7767D9_iu32,
					0xD51E3DAE_iu32, 0xD81533A7_iu32, 0xCF0821BC_iu32, 0xC2032FB5_iu32, 0xE132058A_iu32, 0xEC390B83_iu32, 0xFB241998_iu32, 0xF62F1791_iu32,
					0xD68D764D_iu32, 0xDB867844_iu32, 0xCC9B6A5F_iu32, 0xC1906456_iu32, 0xE2A14E69_iu32, 0xEFAA4060_iu32, 0xF8B7527B_iu32, 0xF5BC5C72_iu32,
					0xBED50605_iu32, 0xB3DE080C_iu32, 0xA4C31A17_iu32, 0xA9C8141E_iu32, 0x8AF93E21_iu32, 0x87F23028_iu32, 0x90EF2233_iu32, 0x9DE42C3A_iu32,
					0x063D96DD_iu32, 0x0B3698D4_iu32, 0x1C2B8ACF_iu32, 0x112084C6_iu32, 0x3211AEF9_iu32, 0x3F1AA0F0_iu32, 0x2807B2EB_iu32, 0x250CBCE2_iu32,
					0x6E65E695_iu32, 0x636EE89C_iu32, 0x7473FA87_iu32, 0x7978F48E_iu32, 0x5A49DEB1_iu32, 0x5742D0B8_iu32, 0x405FC2A3_iu32, 0x4D54CCAA_iu32,
					0xDAF741EC_iu32, 0xD7FC4FE5_iu32, 0xC0E15DFE_iu32, 0xCDEA53F7_iu32, 0xEEDB79C8_iu32, 0xE3D077C1_iu32, 0xF4CD65DA_iu32, 0xF9C66BD3_iu32,
					0xB2AF31A4_iu32, 0xBFA43FAD_iu32, 0xA8B92DB6_iu32, 0xA5B223BF_iu32, 0x86830980_iu32, 0x8B880789_iu32, 0x9C951592_iu32, 0x919E1B9B_iu32,
					0x0A47A17C_iu32, 0x074CAF75_iu32, 0x1051BD6E_iu32, 0x1D5AB367_iu32, 0x3E6B9958_iu32, 0x33609751_iu32, 0x247D854A_iu32, 0x29768B43_iu32,
					0x621FD134_iu32, 0x6F14DF3D_iu32, 0x7809CD26_iu32, 0x7502C32F_iu32, 0x5633E910_iu32, 0x5B38E719_iu32, 0x4C25F502_iu32, 0x412EFB0B_iu32,
					0x618C9AD7_iu32, 0x6C8794DE_iu32, 0x7B9A86C5_iu32, 0x769188CC_iu32, 0x55A0A2F3_iu32, 0x58ABACFA_iu32, 0x4FB6BEE1_iu32, 0x42BDB0E8_iu32,
					0x09D4EA9F_iu32, 0x04DFE496_iu32, 0x13C2F68D_iu32, 0x1EC9F884_iu32, 0x3DF8D2BB_iu32, 0x30F3DCB2_iu32, 0x27EECEA9_iu32, 0x2AE5C0A0_iu32,
					0xB13C7A47_iu32, 0xBC37744E_iu32, 0xAB2A6655_iu32, 0xA621685C_iu32, 0x85104263_iu32, 0x881B4C6A_iu32, 0x9F065E71_iu32, 0x920D5078_iu32,
					0xD9640A0F_iu32, 0xD46F0406_iu32, 0xC372161D_iu32, 0xCE791814_iu32, 0xED48322B_iu32, 0xE0433C22_iu32, 0xF75E2E39_iu32, 0xFA552030_iu32,
					0xB701EC9A_iu32, 0xBA0AE293_iu32, 0xAD17F088_iu32, 0xA01CFE81_iu32, 0x832DD4BE_iu32, 0x8E26DAB7_iu32, 0x993BC8AC_iu32, 0x9430C6A5_iu32,
					0xDF599CD2_iu32, 0xD25292DB_iu32, 0xC54F80C0_iu32, 0xC8448EC9_iu32, 0xEB75A4F6_iu32, 0xE67EAAFF_iu32, 0xF163B8E4_iu32, 0xFC68B6ED_iu32,
					0x67B10C0A_iu32, 0x6ABA0203_iu32, 0x7DA71018_iu32, 0x70AC1E11_iu32, 0x539D342E_iu32, 0x5E963A27_iu32, 0x498B283C_iu32, 0x44802635_iu32,
					0x0FE97C42_iu32, 0x02E2724B_iu32, 0x15FF6050_iu32, 0x18F46E59_iu32, 0x3BC54466_iu32, 0x36CE4A6F_iu32, 0x21D35874_iu32, 0x2CD8567D_iu32,
					0x0C7A37A1_iu32, 0x017139A8_iu32, 0x166C2BB3_iu32, 0x1B6725BA_iu32, 0x38560F85_iu32, 0x355D018C_iu32, 0x22401397_iu32, 0x2F4B1D9E_iu32,
					0x642247E9_iu32, 0x692949E0_iu32, 0x7E345BFB_iu32, 0x733F55F2_iu32, 0x500E7FCD_iu32, 0x5D0571C4_iu32, 0x4A1863DF_iu32, 0x47136DD6_iu32,
					0xDCCAD731_iu32, 0xD1C1D938_iu32, 0xC6DCCB23_iu32, 0xCBD7C52A_iu32, 0xE8E6EF15_iu32, 0xE5EDE11C_iu32, 0xF2F0F307_iu32, 0xFFFBFD0E_iu32,
					0xB492A779_iu32, 0xB999A970_iu32, 0xAE84BB6B_iu32, 0xA38FB562_iu32, 0x80BE9F5D_iu32, 0x8DB59154_iu32, 0x9AA8834F_iu32, 0x97A38D46_iu32,
				},
				{
					0x00000000_iu32, 0x090D0B0E_iu32, 0x121A161C_iu32, 0x1B171D12_iu32, 0x24342C38_iu32, 0x2D392736_iu32, 0x362E3A24_iu32, 0x3F23312A_iu32,
					0x48685870_iu32, 0x4165537E_iu32, 0x5A724E6C_iu32, 0x537F4562_iu32, 0x6C5C7448_iu32, 0x65517F46_iu32, 0x7E466254_iu32, 0x774B695A_iu32,
					0x90D0B0E0_iu32, 0x99DDBBEE_iu32, 0x82CAA6FC_iu32, 0x8BC7ADF2_iu32, 0xB4E49CD8_iu32, 0xBDE997D6_iu32, 0xA6FE8AC4_iu32, 0xAFF381CA_iu32,
					0xD8B8E890_iu32, 0xD1B5E39E_iu32, 0xCAA2FE8C_iu32, 0xC3AFF582_iu32, 0xFC8CC4A8_iu32, 0xF581CFA6_iu32, 0xEE96D2B4_iu32, 0xE79BD9BA_iu32,
					0x3BBB7BDB_iu32, 0x32B670D5_iu32, 0x29A16DC7_iu32, 0x20AC66C9_iu32, 0x1F8F57E3_iu32, 0x16825CED_iu32, 0x0D9541FF_iu32, 0x04984AF1_iu32,
					0x73D323AB_iu32, 0x7ADE28A5_iu32, 0x61C935B7_iu32, 0x68C43EB9_iu32, 0x57E70F93_iu32, 0x5EEA049D_iu32, 0x45FD198F_iu32, 0x4CF01281_iu32,
					0xAB6BCB3B_iu32, 0xA266C035_iu32, 0xB971DD27_iu32, 0xB07CD629_iu32, 0x8F5FE703_iu32, 0x8652EC0D_iu32, 0x9D45F11F_iu32, 0x9448FA11_iu32,
					0xE303934B_iu32, 0xEA0E9845_iu32, 0xF1198557_iu32, 0xF8148E59_iu32, 0xC737BF73_iu32, 0xCE3AB47D_iu32, 0xD52DA96F_iu32, 0xDC20A261_iu32,
					0x766DF6AD_iu32, 0x7F60FDA3_iu32, 0x6477E0B1_iu32, 0x6D7AEBBF_iu32, 0x5259DA95_iu32, 0x5B54D19B_iu32, 0x4043CC89_iu32, 0x494EC787_iu32,
					0x3E05AEDD_iu32, 0x3708A5D3_iu32, 0x2C1FB8C1_iu32, 0x2512B3CF_iu32, 0x1A3182E5_iu32, 0x133C89EB_iu32, 0x082B94F9_iu32, 0x01269FF7_iu32,
					0xE6BD464D_iu32, 0xEFB04D43_iu32, 0xF4A75051_iu32, 0xFDAA5B5F_iu32, 0xC2896A75_iu32, 0xCB84617B_iu32, 0xD0937C69_iu32, 0xD99E7767_iu32,
					0xAED51E3D_iu32, 0xA7D81533_iu32, 0xBCCF0821_iu32, 0xB5C2032F_iu32, 0x8AE13205_iu32, 0x83EC390B_iu32, 0x98FB2419_iu32, 0x91F62F17_iu32,
					0x4DD68D76_iu32, 0x44DB8678_iu32, 0x5FCC9B6A_iu32, 0x56C19064_iu32, 0x69E2A14E_iu32, 0x60EFAA40_iu32, 0x7BF8B752_iu32, 0x72F5BC5C_iu32,
					0x05BED506_iu32, 0x0CB3DE08_iu32, 0x17A4C31A_iu32, 0x1EA9C814_iu32, 0x218AF93E_iu32, 0x2887F230_iu32, 0x3390EF22_iu32, 0x3A9DE42C_iu32,
					0xDD063D96_iu32, 0xD40B3698_iu32, 0xCF1C2B8A_iu32, 0xC6112084_iu32, 0xF93211AE_iu32, 0xF03F1AA0_iu32, 0xEB2807B2_iu32, 0xE2250CBC_iu32,
					0x956E65E6_iu32, 0x9C636EE8_iu32, 0x877473FA_iu32, 0x8E7978F4_iu32, 0xB15A49DE_iu32, 0xB85742D0_iu32, 0xA3405FC2_iu32, 0xAA4D54CC_iu32,
					0xECDAF741_iu32, 0xE5D7FC4F_iu32, 0xFEC0E15D_iu32, 0xF7CDEA53_iu32, 0xC8EEDB79_iu32, 0xC1E3D077_iu32, 0xDAF4CD65_iu32, 0xD3F9C66B_iu32,
					0xA4B2AF31_iu32, 0xADBFA43F_iu32, 0xB6A8B92D_iu32, 0xBFA5B223_iu32, 0x80868309_iu32, 0x898B8807_iu32, 0x929C9515_iu32, 0x9B919E1B_iu32,
					0x7C0A47A1_iu32, 0x75074CAF_iu32, 0x6E1051BD_iu32, 0x671D5AB3_iu32, 0x583E6B99_iu32, 0x51336097_iu32, 0x4A247D85_iu32, 0x4329768B_iu32,
					0x34621FD1_iu32, 0x3D6F14DF_iu32, 0x267809CD_iu32, 0x2F7502C3_iu32, 0x105633E9_iu32, 0x195B38E7_iu32, 0x024C25F5_iu32, 0x0B412EFB_iu32,
					0xD7618C9A_iu32, 0xDE6C8794_iu32, 0xC57B9A86_iu32, 0xCC769188_iu32, 0xF355A0A2_iu32, 0xFA58ABAC_iu32, 0xE14FB6BE_iu32, 0xE842BDB0_iu32,
					0x9F09D4EA_iu32, 0x9604DFE4_iu32, 0x8D13C2F6_iu32, 0x841EC9F8_iu32, 0xBB3DF8D2_iu32, 0xB230F3DC_iu32, 0xA927EECE_iu32, 0xA02AE5C0_iu32,
					0x47B13C7A_iu32, 0x4EBC3774_iu32, 0x55AB2A66_iu32, 0x5CA62168_iu32, 0x63851042_iu32, 0x6A881B4C_iu32, 0x719F065E_iu32, 0x78920D50_iu32,
					0x0FD9640A_iu32, 0x06D46F04_iu32, 0x1DC37216_iu32, 0x14CE7918_iu32, 0x2BED4832_iu32, 0x22E0433C_iu32, 0x39F75E2E_iu32, 0x30FA5520_iu32,
					0x9AB701EC_iu32, 0x93BA0AE2_iu32, 0x88AD17F0_iu32, 0x81A01CFE_iu32, 0xBE832DD4_iu32, 0xB78E26DA_iu32, 0xAC993BC8_iu32, 0xA59430C6_iu32,
					0xD2DF599C_iu32, 0xDBD25292_iu32, 0xC0C54F80_iu32, 0xC9C8448E_iu32, 0xF6EB75A4_iu32, 0xFFE67EAA_iu32, 0xE4F163B8_iu32, 0xEDFC68B6_iu32,
					0x0A67B10C_iu32, 0x036ABA02_iu32, 0x187DA710_iu32, 0x1170AC1E_iu32, 0x2E539D34_iu32, 0x275E963A_iu32, 0x3C498B28_iu32, 0x35448026_iu32,
					0x420FE97C_iu32, 0x4B02E272_iu32, 0x5015FF60_iu32, 0x5918F46E_iu32, 0x663BC544_iu32, 0x6F36CE4A_iu32, 0x7421D358_iu32, 0x7D2CD856_iu32,
					0xA10C7A37_iu32, 0xA8017139_iu32, 0xB3166C2B_iu32, 0xBA1B6725_iu32, 0x8538560F_iu32, 0x8C355D01_iu32, 0x97224013_iu32, 0x9E2F4B1D_iu32,
					0xE9642247_iu32, 0xE0692949_iu32, 0xFB7E345B_iu32, 0xF2733F55_iu32, 0xCD500E7F_iu32, 0xC45D0571_iu32, 0xDF4A1863_iu32, 0xD647136D_iu32,
					0x31DCCAD7_iu32, 0x38D1C1D9_iu32, 0x23C6DCCB_iu32, 0x2ACBD7C5_iu32, 0x15E8E6EF_iu32, 0x1CE5EDE1_iu32, 0x07F2F0F3_iu32, 0x0EFFFBFD_iu32,
					0x79B492A7_iu32, 0x70B999A9_iu32, 0x6BAE84BB_iu32, 0x62A38FB5_iu32, 0x5D80BE9F_iu32, 0x548DB591_iu32, 0x4F9AA883_iu32, 0x4697A38D_iu32,
				},
				{
					0x00000000_iu32, 0x0E090D0B_iu32, 0x1C121A16_iu32, 0x121B171D_iu32, 0x3824342C_iu32, 0x362D3927_iu32, 0x24362E3A_iu32, 0x2A3F2331_iu32,
					0x70486858_iu32, 0x7E416553_iu32, 0x6C5A724E_iu32, 0x62537F45_iu32, 0x486C5C74_iu32, 0x4665517F_iu32, 0x547E4662_iu32, 0x5A774B69_iu32,
					0xE090D0B0_iu32, 0xEE99DDBB_iu32, 0xFC82CAA6_iu32, 0xF28BC7AD_iu32, 0xD8B4E49C_iu32, 0xD6BDE997_iu32, 0xC4A6FE8A_iu32, 0xCAAFF381_iu32,
					0x90D8B8E8_iu32, 0x9ED1B5E3_iu32, 0x8CCAA2FE_iu32, 0x82C3AFF5_iu32, 0xA8FC8CC4_iu32, 0xA6F581CF_iu32, 0xB4EE96D2_iu32, 0xBAE79BD9_iu32,
					0xDB3BBB7B_iu32, 0xD532B670_iu32, 0xC729A16D_iu32, 0xC920AC66_iu32, 0xE31F8F57_iu32, 0xED16825C_iu32, 0xFF0D9541_iu32, 0xF104984A_iu32,
					0xAB73D323_iu32, 0xA57ADE28_iu32, 0xB761C935_iu32, 0xB968C43E_iu32, 0x9357E70F_iu32, 0x9D5EEA04_iu32, 0x8F45FD19_iu32, 0x814CF012_iu32,
					0x3BAB6BCB_iu32, 0x35A266C0_iu32, 0x27B971DD_iu32, 0x29B07CD6_iu32, 0x038F5FE7_iu32, 0x0D8652EC_iu32, 0x1F9D45F1_iu32, 0x119448FA_iu32,
					0x4BE30393_iu32, 0x45EA0E98_iu32, 0x57F11985_iu32, 0x59F8148E_iu32, 0x73C737BF_iu32, 0x7DCE3AB4_iu32, 0x6FD52DA9_iu32, 0x61DC20A2_iu32,
					0xAD766DF6_iu32, 0xA37F60FD_iu32, 0xB16477E0_iu32, 0xBF6D7AEB_iu32, 0x955259DA_iu32, 0x9B5B54D1_iu32, 0x894043CC_iu32, 0x87494EC7_iu32,
					0xDD3E05AE_iu32, 0xD33708A5_iu32, 0xC12C1FB8_iu32, 0xCF2512B3_iu32, 0xE51A3182_iu32, 0xEB133C89_iu32, 0xF9082B94_iu32, 0xF701269F_iu32,
					0x4DE6BD46_iu32, 0x43EFB04D_iu32, 0x51F4A750_iu32, 0x5FFDAA5B_iu32, 0x75C2896A_iu32, 0x7BCB8461_iu32, 0x69D0937C_iu32, 0x67D99E77_iu32,
					0x3DAED51E_iu32, 0x33A7D815_iu32, 0x21BCCF08_iu32, 0x2FB5C203_iu32, 0x058AE132_iu32, 0x0B83EC39_iu32, 0x1998FB24_iu32, 0x1791F62F_iu32,
					0x764DD68D_iu32, 0x7844DB86_iu32, 0x6A5FCC9B_iu32, 0x6456C190_iu32, 0x4E69E2A1_iu32, 0x4060EFAA_iu32, 0x527BF8B7_iu32, 0x5C72F5BC_iu32,
					0x0605BED5_iu32, 0x080CB3DE_iu32, 0x1A17A4C3_iu32, 0x141EA9C8_iu32, 0x3E218AF9_iu32, 0x302887F2_iu32, 0x223390EF_iu32, 0x2C3A9DE4_iu32,
					0x96DD063D_iu32, 0x98D40B36_iu32, 0x8ACF1C2B_iu32, 0x84C61120_iu32, 0xAEF93211_iu32, 0xA0F03F1A_iu32, 0xB2EB2807_iu32, 0xBCE2250C_iu32,
					0xE6956E65_iu32, 0xE89C636E_iu32, 0xFA877473_iu32, 0xF48E7978_iu32, 0xDEB15A49_iu32, 0xD0B85742_iu32, 0xC2A3405F_iu32, 0xCCAA4D54_iu32,
					0x41ECDAF7_iu32, 0x4FE5D7FC_iu32, 0x5DFEC0E1_iu32, 0x53F7CDEA_iu32, 0x79C8EEDB_iu32, 0x77C1E3D0_iu32, 0x65DAF4CD_iu32, 0x6BD3F9C6_iu32,
					0x31A4B2AF_iu32, 0x3FADBFA4_iu32, 0x2DB6A8B9_iu32, 0x23BFA5B2_iu32, 0x09808683_iu32, 0x07898B88_iu32, 0x15929C95_iu32, 0x1B9B919E_iu32,
					0xA17C0A47_iu32, 0xAF75074C_iu32, 0xBD6E1051_iu32, 0xB3671D5A_iu32, 0x99583E6B_iu32, 0x97513360_iu32, 0x854A247D_iu32, 0x8B432976_iu32,
					0xD134621F_iu32, 0xDF3D6F14_iu32, 0xCD267809_iu32, 0xC32F7502_iu32, 0xE9105633_iu32, 0xE7195B38_iu32, 0xF5024C25_iu32, 0xFB0B412E_iu32,
					0x9AD7618C_iu32, 0x94DE6C87_iu32, 0x86C57B9A_iu32, 0x88CC7691_iu32, 0xA2F355A0_iu32, 0xACFA58AB_iu32, 0xBEE14FB6_iu32, 0xB0E842BD_iu32,
					0xEA9F09D4_iu32, 0xE49604DF_iu32, 0xF68D13C2_iu32, 0xF8841EC9_iu32, 0xD2BB3DF8_iu32, 0xDCB230F3_iu32, 0xCEA927EE_iu32, 0xC0A02AE5_iu32,
					0x7A47B13C_iu32, 0x744EBC37_iu32, 0x6655AB2A_iu32, 0x685CA621_iu32, 0x42638510_iu32, 0x4C6A881B_iu32, 0x5E719F06_iu32, 0x5078920D_iu32,
					0x0A0FD964_iu32, 0x0406D46F_iu32, 0x161DC372_iu32, 0x1814CE79_iu32, 0x322BED48_iu32, 0x3C22E043_iu32, 0x2E39F75E_iu32, 0x2030FA55_iu32,
					0xEC9AB701_iu32, 0xE293BA0A_iu32, 0xF088AD17_iu32, 0xFE81A01C_iu32, 0xD4BE832D_iu32, 0xDAB78E26_iu32, 0xC8AC993B_iu32, 0xC6A59430_iu32,
					0x9CD2DF59_iu32, 0x92DBD252_iu32, 0x80C0C54F_iu32, 0x8EC9C844_iu32, 0xA4F6EB75_iu32, 0xAAFFE67E_iu32, 0xB8E4F163_iu32, 0xB6EDFC68_iu32,
					0x0C0A67B1_iu32, 0x02036ABA_iu32, 0x10187DA7_iu32, 0x1E1170AC_iu32, 0x342E539D_iu32, 0x3A275E96_iu32, 0x283C498B_iu32, 0x26354480_iu32,
					0x7C420FE9_iu32, 0x724B02E2_iu32, 0x605015FF_iu32, 0x6E5918F4_iu32, 0x44663BC5_iu32, 0x4A6F36CE_iu32, 0x587421D3_iu32, 0x567D2CD8_iu32,
					0x37A10C7A_iu32, 0x39A80171_iu32, 0x2BB3166C_iu32, 0x25BA1B67_iu32, 0x0F853856_iu32, 0x018C355D_iu32, 0x13972240_iu32, 0x1D9E2F4B_iu32,
					0x47E96422_iu32, 0x49E06929_iu32, 0x5BFB7E34_iu32, 0x55F2733F_iu32, 0x7FCD500E_iu32, 0x71C45D05_iu32, 0x63DF4A18_iu32, 0x6DD64713_iu32,
					0xD731DCCA_iu32, 0xD938D1C1_iu32, 0xCB23C6DC_iu32, 0xC52ACBD7_iu32, 0xEF15E8E6_iu32, 0xE11CE5ED_iu32, 0xF307F2F0_iu32, 0xFD0EFFFB_iu32,
					0xA779B492_iu32, 0xA970B999_iu32, 0xBB6BAE84_iu32, 0xB562A38F_iu32, 0x9F5D80BE_iu32, 0x91548DB5_iu32, 0x834F9AA8_iu32, 0x8D4697A3_iu32,
				}
			};

			// 0x235AED0 ~ 256 * 4 * 4 = 4096 bytes
			inline constexpr ZArray<ZArray<IntegerU32, 256_szz>, 4_szz> k_box_32_b = {
				{
					0xC66363A5_iu32, 0xF87C7C84_iu32, 0xEE777799_iu32, 0xF67B7B8D_iu32, 0xFFF2F20D_iu32, 0xD66B6BBD_iu32, 0xDE6F6FB1_iu32, 0x91C5C554_iu32,
					0x60303050_iu32, 0x02010103_iu32, 0xCE6767A9_iu32, 0x562B2B7D_iu32, 0xE7FEFE19_iu32, 0xB5D7D762_iu32, 0x4DABABE6_iu32, 0xEC76769A_iu32,
					0x8FCACA45_iu32, 0x1F82829D_iu32, 0x89C9C940_iu32, 0xFA7D7D87_iu32, 0xEFFAFA15_iu32, 0xB25959EB_iu32, 0x8E4747C9_iu32, 0xFBF0F00B_iu32,
					0x41ADADEC_iu32, 0xB3D4D467_iu32, 0x5FA2A2FD_iu32, 0x45AFAFEA_iu32, 0x239C9CBF_iu32, 0x53A4A4F7_iu32, 0xE4727296_iu32, 0x9BC0C05B_iu32,
					0x75B7B7C2_iu32, 0xE1FDFD1C_iu32, 0x3D9393AE_iu32, 0x4C26266A_iu32, 0x6C36365A_iu32, 0x7E3F3F41_iu32, 0xF5F7F702_iu32, 0x83CCCC4F_iu32,
					0x6834345C_iu32, 0x51A5A5F4_iu32, 0xD1E5E534_iu32, 0xF9F1F108_iu32, 0xE2717193_iu32, 0xABD8D873_iu32, 0x62313153_iu32, 0x2A15153F_iu32,
					0x0804040C_iu32, 0x95C7C752_iu32, 0x46232365_iu32, 0x9DC3C35E_iu32, 0x30181828_iu32, 0x379696A1_iu32, 0x0A05050F_iu32, 0x2F9A9AB5_iu32,
					0x0E070709_iu32, 0x24121236_iu32, 0x1B80809B_iu32, 0xDFE2E23D_iu32, 0xCDEBEB26_iu32, 0x4E272769_iu32, 0x7FB2B2CD_iu32, 0xEA75759F_iu32,
					0x1209091B_iu32, 0x1D83839E_iu32, 0x582C2C74_iu32, 0x341A1A2E_iu32, 0x361B1B2D_iu32, 0xDC6E6EB2_iu32, 0xB45A5AEE_iu32, 0x5BA0A0FB_iu32,
					0xA45252F6_iu32, 0x763B3B4D_iu32, 0xB7D6D661_iu32, 0x7DB3B3CE_iu32, 0x5229297B_iu32, 0xDDE3E33E_iu32, 0x5E2F2F71_iu32, 0x13848497_iu32,
					0xA65353F5_iu32, 0xB9D1D168_iu32, 0x00000000_iu32, 0xC1EDED2C_iu32, 0x40202060_iu32, 0xE3FCFC1F_iu32, 0x79B1B1C8_iu32, 0xB65B5BED_iu32,
					0xD46A6ABE_iu32, 0x8DCBCB46_iu32, 0x67BEBED9_iu32, 0x7239394B_iu32, 0x944A4ADE_iu32, 0x984C4CD4_iu32, 0xB05858E8_iu32, 0x85CFCF4A_iu32,
					0xBBD0D06B_iu32, 0xC5EFEF2A_iu32, 0x4FAAAAE5_iu32, 0xEDFBFB16_iu32, 0x864343C5_iu32, 0x9A4D4DD7_iu32, 0x66333355_iu32, 0x11858594_iu32,
					0x8A4545CF_iu32, 0xE9F9F910_iu32, 0x04020206_iu32, 0xFE7F7F81_iu32, 0xA05050F0_iu32, 0x783C3C44_iu32, 0x259F9FBA_iu32, 0x4BA8A8E3_iu32,
					0xA25151F3_iu32, 0x5DA3A3FE_iu32, 0x804040C0_iu32, 0x058F8F8A_iu32, 0x3F9292AD_iu32, 0x219D9DBC_iu32, 0x70383848_iu32, 0xF1F5F504_iu32,
					0x63BCBCDF_iu32, 0x77B6B6C1_iu32, 0xAFDADA75_iu32, 0x42212163_iu32, 0x20101030_iu32, 0xE5FFFF1A_iu32, 0xFDF3F30E_iu32, 0xBFD2D26D_iu32,
					0x81CDCD4C_iu32, 0x180C0C14_iu32, 0x26131335_iu32, 0xC3ECEC2F_iu32, 0xBE5F5FE1_iu32, 0x359797A2_iu32, 0x884444CC_iu32, 0x2E171739_iu32,
					0x93C4C457_iu32, 0x55A7A7F2_iu32, 0xFC7E7E82_iu32, 0x7A3D3D47_iu32, 0xC86464AC_iu32, 0xBA5D5DE7_iu32, 0x3219192B_iu32, 0xE6737395_iu32,
					0xC06060A0_iu32, 0x19818198_iu32, 0x9E4F4FD1_iu32, 0xA3DCDC7F_iu32, 0x44222266_iu32, 0x542A2A7E_iu32, 0x3B9090AB_iu32, 0x0B888883_iu32,
					0x8C4646CA_iu32, 0xC7EEEE29_iu32, 0x6BB8B8D3_iu32, 0x2814143C_iu32, 0xA7DEDE79_iu32, 0xBC5E5EE2_iu32, 0x160B0B1D_iu32, 0xADDBDB76_iu32,
					0xDBE0E03B_iu32, 0x64323256_iu32, 0x743A3A4E_iu32, 0x140A0A1E_iu32, 0x924949DB_iu32, 0x0C06060A_iu32, 0x4824246C_iu32, 0xB85C5CE4_iu32,
					0x9FC2C25D_iu32, 0xBDD3D36E_iu32, 0x43ACACEF_iu32, 0xC46262A6_iu32, 0x399191A8_iu32, 0x319595A4_iu32, 0xD3E4E437_iu32, 0xF279798B_iu32,
					0xD5E7E732_iu32, 0x8BC8C843_iu32, 0x6E373759_iu32, 0xDA6D6DB7_iu32, 0x018D8D8C_iu32, 0xB1D5D564_iu32, 0x9C4E4ED2_iu32, 0x49A9A9E0_iu32,
					0xD86C6CB4_iu32, 0xAC5656FA_iu32, 0xF3F4F407_iu32, 0xCFEAEA25_iu32, 0xCA6565AF_iu32, 0xF47A7A8E_iu32, 0x47AEAEE9_iu32, 0x10080818_iu32,
					0x6FBABAD5_iu32, 0xF0787888_iu32, 0x4A25256F_iu32, 0x5C2E2E72_iu32, 0x381C1C24_iu32, 0x57A6A6F1_iu32, 0x73B4B4C7_iu32, 0x97C6C651_iu32,
					0xCBE8E823_iu32, 0xA1DDDD7C_iu32, 0xE874749C_iu32, 0x3E1F1F21_iu32, 0x964B4BDD_iu32, 0x61BDBDDC_iu32, 0x0D8B8B86_iu32, 0x0F8A8A85_iu32,
					0xE0707090_iu32, 0x7C3E3E42_iu32, 0x71B5B5C4_iu32, 0xCC6666AA_iu32, 0x904848D8_iu32, 0x06030305_iu32, 0xF7F6F601_iu32, 0x1C0E0E12_iu32,
					0xC26161A3_iu32, 0x6A35355F_iu32, 0xAE5757F9_iu32, 0x69B9B9D0_iu32, 0x17868691_iu32, 0x99C1C158_iu32, 0x3A1D1D27_iu32, 0x279E9EB9_iu32,
					0xD9E1E138_iu32, 0xEBF8F813_iu32, 0x2B9898B3_iu32, 0x22111133_iu32, 0xD26969BB_iu32, 0xA9D9D970_iu32, 0x078E8E89_iu32, 0x339494A7_iu32,
					0x2D9B9BB6_iu32, 0x3C1E1E22_iu32, 0x15878792_iu32, 0xC9E9E920_iu32, 0x87CECE49_iu32, 0xAA5555FF_iu32, 0x50282878_iu32, 0xA5DFDF7A_iu32,
					0x038C8C8F_iu32, 0x59A1A1F8_iu32, 0x09898980_iu32, 0x1A0D0D17_iu32, 0x65BFBFDA_iu32, 0xD7E6E631_iu32, 0x844242C6_iu32, 0xD06868B8_iu32,
					0x824141C3_iu32, 0x299999B0_iu32, 0x5A2D2D77_iu32, 0x1E0F0F11_iu32, 0x7BB0B0CB_iu32, 0xA85454FC_iu32, 0x6DBBBBD6_iu32, 0x2C16163A_iu32,
				},
				{
					0x6363A5C6_iu32, 0x7C7C84F8_iu32, 0x777799EE_iu32, 0x7B7B8DF6_iu32, 0xF2F20DFF_iu32, 0x6B6BBDD6_iu32, 0x6F6FB1DE_iu32, 0xC5C55491_iu32,
					0x30305060_iu32, 0x01010302_iu32, 0x6767A9CE_iu32, 0x2B2B7D56_iu32, 0xFEFE19E7_iu32, 0xD7D762B5_iu32, 0xABABE64D_iu32, 0x76769AEC_iu32,
					0xCACA458F_iu32, 0x82829D1F_iu32, 0xC9C94089_iu32, 0x7D7D87FA_iu32, 0xFAFA15EF_iu32, 0x5959EBB2_iu32, 0x4747C98E_iu32, 0xF0F00BFB_iu32,
					0xADADEC41_iu32, 0xD4D467B3_iu32, 0xA2A2FD5F_iu32, 0xAFAFEA45_iu32, 0x9C9CBF23_iu32, 0xA4A4F753_iu32, 0x727296E4_iu32, 0xC0C05B9B_iu32,
					0xB7B7C275_iu32, 0xFDFD1CE1_iu32, 0x9393AE3D_iu32, 0x26266A4C_iu32, 0x36365A6C_iu32, 0x3F3F417E_iu32, 0xF7F702F5_iu32, 0xCCCC4F83_iu32,
					0x34345C68_iu32, 0xA5A5F451_iu32, 0xE5E534D1_iu32, 0xF1F108F9_iu32, 0x717193E2_iu32, 0xD8D873AB_iu32, 0x31315362_iu32, 0x15153F2A_iu32,
					0x04040C08_iu32, 0xC7C75295_iu32, 0x23236546_iu32, 0xC3C35E9D_iu32, 0x18182830_iu32, 0x9696A137_iu32, 0x05050F0A_iu32, 0x9A9AB52F_iu32,
					0x0707090E_iu32, 0x12123624_iu32, 0x80809B1B_iu32, 0xE2E23DDF_iu32, 0xEBEB26CD_iu32, 0x2727694E_iu32, 0xB2B2CD7F_iu32, 0x75759FEA_iu32,
					0x09091B12_iu32, 0x83839E1D_iu32, 0x2C2C7458_iu32, 0x1A1A2E34_iu32, 0x1B1B2D36_iu32, 0x6E6EB2DC_iu32, 0x5A5AEEB4_iu32, 0xA0A0FB5B_iu32,
					0x5252F6A4_iu32, 0x3B3B4D76_iu32, 0xD6D661B7_iu32, 0xB3B3CE7D_iu32, 0x29297B52_iu32, 0xE3E33EDD_iu32, 0x2F2F715E_iu32, 0x84849713_iu32,
					0x5353F5A6_iu32, 0xD1D168B9_iu32, 0x00000000_iu32, 0xEDED2CC1_iu32, 0x20206040_iu32, 0xFCFC1FE3_iu32, 0xB1B1C879_iu32, 0x5B5BEDB6_iu32,
					0x6A6ABED4_iu32, 0xCBCB468D_iu32, 0xBEBED967_iu32, 0x39394B72_iu32, 0x4A4ADE94_iu32, 0x4C4CD498_iu32, 0x5858E8B0_iu32, 0xCFCF4A85_iu32,
					0xD0D06BBB_iu32, 0xEFEF2AC5_iu32, 0xAAAAE54F_iu32, 0xFBFB16ED_iu32, 0x4343C586_iu32, 0x4D4DD79A_iu32, 0x33335566_iu32, 0x85859411_iu32,
					0x4545CF8A_iu32, 0xF9F910E9_iu32, 0x02020604_iu32, 0x7F7F81FE_iu32, 0x5050F0A0_iu32, 0x3C3C4478_iu32, 0x9F9FBA25_iu32, 0xA8A8E34B_iu32,
					0x5151F3A2_iu32, 0xA3A3FE5D_iu32, 0x4040C080_iu32, 0x8F8F8A05_iu32, 0x9292AD3F_iu32, 0x9D9DBC21_iu32, 0x38384870_iu32, 0xF5F504F1_iu32,
					0xBCBCDF63_iu32, 0xB6B6C177_iu32, 0xDADA75AF_iu32, 0x21216342_iu32, 0x10103020_iu32, 0xFFFF1AE5_iu32, 0xF3F30EFD_iu32, 0xD2D26DBF_iu32,
					0xCDCD4C81_iu32, 0x0C0C1418_iu32, 0x13133526_iu32, 0xECEC2FC3_iu32, 0x5F5FE1BE_iu32, 0x9797A235_iu32, 0x4444CC88_iu32, 0x1717392E_iu32,
					0xC4C45793_iu32, 0xA7A7F255_iu32, 0x7E7E82FC_iu32, 0x3D3D477A_iu32, 0x6464ACC8_iu32, 0x5D5DE7BA_iu32, 0x19192B32_iu32, 0x737395E6_iu32,
					0x6060A0C0_iu32, 0x81819819_iu32, 0x4F4FD19E_iu32, 0xDCDC7FA3_iu32, 0x22226644_iu32, 0x2A2A7E54_iu32, 0x9090AB3B_iu32, 0x8888830B_iu32,
					0x4646CA8C_iu32, 0xEEEE29C7_iu32, 0xB8B8D36B_iu32, 0x14143C28_iu32, 0xDEDE79A7_iu32, 0x5E5EE2BC_iu32, 0x0B0B1D16_iu32, 0xDBDB76AD_iu32,
					0xE0E03BDB_iu32, 0x32325664_iu32, 0x3A3A4E74_iu32, 0x0A0A1E14_iu32, 0x4949DB92_iu32, 0x06060A0C_iu32, 0x24246C48_iu32, 0x5C5CE4B8_iu32,
					0xC2C25D9F_iu32, 0xD3D36EBD_iu32, 0xACACEF43_iu32, 0x6262A6C4_iu32, 0x9191A839_iu32, 0x9595A431_iu32, 0xE4E437D3_iu32, 0x79798BF2_iu32,
					0xE7E732D5_iu32, 0xC8C8438B_iu32, 0x3737596E_iu32, 0x6D6DB7DA_iu32, 0x8D8D8C01_iu32, 0xD5D564B1_iu32, 0x4E4ED29C_iu32, 0xA9A9E049_iu32,
					0x6C6CB4D8_iu32, 0x5656FAAC_iu32, 0xF4F407F3_iu32, 0xEAEA25CF_iu32, 0x6565AFCA_iu32, 0x7A7A8EF4_iu32, 0xAEAEE947_iu32, 0x08081810_iu32,
					0xBABAD56F_iu32, 0x787888F0_iu32, 0x25256F4A_iu32, 0x2E2E725C_iu32, 0x1C1C2438_iu32, 0xA6A6F157_iu32, 0xB4B4C773_iu32, 0xC6C65197_iu32,
					0xE8E823CB_iu32, 0xDDDD7CA1_iu32, 0x74749CE8_iu32, 0x1F1F213E_iu32, 0x4B4BDD96_iu32, 0xBDBDDC61_iu32, 0x8B8B860D_iu32, 0x8A8A850F_iu32,
					0x707090E0_iu32, 0x3E3E427C_iu32, 0xB5B5C471_iu32, 0x6666AACC_iu32, 0x4848D890_iu32, 0x03030506_iu32, 0xF6F601F7_iu32, 0x0E0E121C_iu32,
					0x6161A3C2_iu32, 0x35355F6A_iu32, 0x5757F9AE_iu32, 0xB9B9D069_iu32, 0x86869117_iu32, 0xC1C15899_iu32, 0x1D1D273A_iu32, 0x9E9EB927_iu32,
					0xE1E138D9_iu32, 0xF8F813EB_iu32, 0x9898B32B_iu32, 0x11113322_iu32, 0x6969BBD2_iu32, 0xD9D970A9_iu32, 0x8E8E8907_iu32, 0x9494A733_iu32,
					0x9B9BB62D_iu32, 0x1E1E223C_iu32, 0x87879215_iu32, 0xE9E920C9_iu32, 0xCECE4987_iu32, 0x5555FFAA_iu32, 0x28287850_iu32, 0xDFDF7AA5_iu32,
					0x8C8C8F03_iu32, 0xA1A1F859_iu32, 0x89898009_iu32, 0x0D0D171A_iu32, 0xBFBFDA65_iu32, 0xE6E631D7_iu32, 0x4242C684_iu32, 0x6868B8D0_iu32,
					0x4141C382_iu32, 0x9999B029_iu32, 0x2D2D775A_iu32, 0x0F0F111E_iu32, 0xB0B0CB7B_iu32, 0x5454FCA8_iu32, 0xBBBBD66D_iu32, 0x16163A2C_iu32,
				},
				{
					0xA5C66363_iu32, 0x84F87C7C_iu32, 0x99EE7777_iu32, 0x8DF67B7B_iu32, 0x0DFFF2F2_iu32, 0xBDD66B6B_iu32, 0xB1DE6F6F_iu32, 0x5491C5C5_iu32,
					0x50603030_iu32, 0x03020101_iu32, 0xA9CE6767_iu32, 0x7D562B2B_iu32, 0x19E7FEFE_iu32, 0x62B5D7D7_iu32, 0xE64DABAB_iu32, 0x9AEC7676_iu32,
					0x458FCACA_iu32, 0x9D1F8282_iu32, 0x4089C9C9_iu32, 0x87FA7D7D_iu32, 0x15EFFAFA_iu32, 0xEBB25959_iu32, 0xC98E4747_iu32, 0x0BFBF0F0_iu32,
					0xEC41ADAD_iu32, 0x67B3D4D4_iu32, 0xFD5FA2A2_iu32, 0xEA45AFAF_iu32, 0xBF239C9C_iu32, 0xF753A4A4_iu32, 0x96E47272_iu32, 0x5B9BC0C0_iu32,
					0xC275B7B7_iu32, 0x1CE1FDFD_iu32, 0xAE3D9393_iu32, 0x6A4C2626_iu32, 0x5A6C3636_iu32, 0x417E3F3F_iu32, 0x02F5F7F7_iu32, 0x4F83CCCC_iu32,
					0x5C683434_iu32, 0xF451A5A5_iu32, 0x34D1E5E5_iu32, 0x08F9F1F1_iu32, 0x93E27171_iu32, 0x73ABD8D8_iu32, 0x53623131_iu32, 0x3F2A1515_iu32,
					0x0C080404_iu32, 0x5295C7C7_iu32, 0x65462323_iu32, 0x5E9DC3C3_iu32, 0x28301818_iu32, 0xA1379696_iu32, 0x0F0A0505_iu32, 0xB52F9A9A_iu32,
					0x090E0707_iu32, 0x36241212_iu32, 0x9B1B8080_iu32, 0x3DDFE2E2_iu32, 0x26CDEBEB_iu32, 0x694E2727_iu32, 0xCD7FB2B2_iu32, 0x9FEA7575_iu32,
					0x1B120909_iu32, 0x9E1D8383_iu32, 0x74582C2C_iu32, 0x2E341A1A_iu32, 0x2D361B1B_iu32, 0xB2DC6E6E_iu32, 0xEEB45A5A_iu32, 0xFB5BA0A0_iu32,
					0xF6A45252_iu32, 0x4D763B3B_iu32, 0x61B7D6D6_iu32, 0xCE7DB3B3_iu32, 0x7B522929_iu32, 0x3EDDE3E3_iu32, 0x715E2F2F_iu32, 0x97138484_iu32,
					0xF5A65353_iu32, 0x68B9D1D1_iu32, 0x00000000_iu32, 0x2CC1EDED_iu32, 0x60402020_iu32, 0x1FE3FCFC_iu32, 0xC879B1B1_iu32, 0xEDB65B5B_iu32,
					0xBED46A6A_iu32, 0x468DCBCB_iu32, 0xD967BEBE_iu32, 0x4B723939_iu32, 0xDE944A4A_iu32, 0xD4984C4C_iu32, 0xE8B05858_iu32, 0x4A85CFCF_iu32,
					0x6BBBD0D0_iu32, 0x2AC5EFEF_iu32, 0xE54FAAAA_iu32, 0x16EDFBFB_iu32, 0xC5864343_iu32, 0xD79A4D4D_iu32, 0x55663333_iu32, 0x94118585_iu32,
					0xCF8A4545_iu32, 0x10E9F9F9_iu32, 0x06040202_iu32, 0x81FE7F7F_iu32, 0xF0A05050_iu32, 0x44783C3C_iu32, 0xBA259F9F_iu32, 0xE34BA8A8_iu32,
					0xF3A25151_iu32, 0xFE5DA3A3_iu32, 0xC0804040_iu32, 0x8A058F8F_iu32, 0xAD3F9292_iu32, 0xBC219D9D_iu32, 0x48703838_iu32, 0x04F1F5F5_iu32,
					0xDF63BCBC_iu32, 0xC177B6B6_iu32, 0x75AFDADA_iu32, 0x63422121_iu32, 0x30201010_iu32, 0x1AE5FFFF_iu32, 0x0EFDF3F3_iu32, 0x6DBFD2D2_iu32,
					0x4C81CDCD_iu32, 0x14180C0C_iu32, 0x35261313_iu32, 0x2FC3ECEC_iu32, 0xE1BE5F5F_iu32, 0xA2359797_iu32, 0xCC884444_iu32, 0x392E1717_iu32,
					0x5793C4C4_iu32, 0xF255A7A7_iu32, 0x82FC7E7E_iu32, 0x477A3D3D_iu32, 0xACC86464_iu32, 0xE7BA5D5D_iu32, 0x2B321919_iu32, 0x95E67373_iu32,
					0xA0C06060_iu32, 0x98198181_iu32, 0xD19E4F4F_iu32, 0x7FA3DCDC_iu32, 0x66442222_iu32, 0x7E542A2A_iu32, 0xAB3B9090_iu32, 0x830B8888_iu32,
					0xCA8C4646_iu32, 0x29C7EEEE_iu32, 0xD36BB8B8_iu32, 0x3C281414_iu32, 0x79A7DEDE_iu32, 0xE2BC5E5E_iu32, 0x1D160B0B_iu32, 0x76ADDBDB_iu32,
					0x3BDBE0E0_iu32, 0x56643232_iu32, 0x4E743A3A_iu32, 0x1E140A0A_iu32, 0xDB924949_iu32, 0x0A0C0606_iu32, 0x6C482424_iu32, 0xE4B85C5C_iu32,
					0x5D9FC2C2_iu32, 0x6EBDD3D3_iu32, 0xEF43ACAC_iu32, 0xA6C46262_iu32, 0xA8399191_iu32, 0xA4319595_iu32, 0x37D3E4E4_iu32, 0x8BF27979_iu32,
					0x32D5E7E7_iu32, 0x438BC8C8_iu32, 0x596E3737_iu32, 0xB7DA6D6D_iu32, 0x8C018D8D_iu32, 0x64B1D5D5_iu32, 0xD29C4E4E_iu32, 0xE049A9A9_iu32,
					0xB4D86C6C_iu32, 0xFAAC5656_iu32, 0x07F3F4F4_iu32, 0x25CFEAEA_iu32, 0xAFCA6565_iu32, 0x8EF47A7A_iu32, 0xE947AEAE_iu32, 0x18100808_iu32,
					0xD56FBABA_iu32, 0x88F07878_iu32, 0x6F4A2525_iu32, 0x725C2E2E_iu32, 0x24381C1C_iu32, 0xF157A6A6_iu32, 0xC773B4B4_iu32, 0x5197C6C6_iu32,
					0x23CBE8E8_iu32, 0x7CA1DDDD_iu32, 0x9CE87474_iu32, 0x213E1F1F_iu32, 0xDD964B4B_iu32, 0xDC61BDBD_iu32, 0x860D8B8B_iu32, 0x850F8A8A_iu32,
					0x90E07070_iu32, 0x427C3E3E_iu32, 0xC471B5B5_iu32, 0xAACC6666_iu32, 0xD8904848_iu32, 0x05060303_iu32, 0x01F7F6F6_iu32, 0x121C0E0E_iu32,
					0xA3C26161_iu32, 0x5F6A3535_iu32, 0xF9AE5757_iu32, 0xD069B9B9_iu32, 0x91178686_iu32, 0x5899C1C1_iu32, 0x273A1D1D_iu32, 0xB9279E9E_iu32,
					0x38D9E1E1_iu32, 0x13EBF8F8_iu32, 0xB32B9898_iu32, 0x33221111_iu32, 0xBBD26969_iu32, 0x70A9D9D9_iu32, 0x89078E8E_iu32, 0xA7339494_iu32,
					0xB62D9B9B_iu32, 0x223C1E1E_iu32, 0x92158787_iu32, 0x20C9E9E9_iu32, 0x4987CECE_iu32, 0xFFAA5555_iu32, 0x78502828_iu32, 0x7AA5DFDF_iu32,
					0x8F038C8C_iu32, 0xF859A1A1_iu32, 0x80098989_iu32, 0x171A0D0D_iu32, 0xDA65BFBF_iu32, 0x31D7E6E6_iu32, 0xC6844242_iu32, 0xB8D06868_iu32,
					0xC3824141_iu32, 0xB0299999_iu32, 0x775A2D2D_iu32, 0x111E0F0F_iu32, 0xCB7BB0B0_iu32, 0xFCA85454_iu32, 0xD66DBBBB_iu32, 0x3A2C1616_iu32,
				},
				{
					0x63A5C663_iu32, 0x7C84F87C_iu32, 0x7799EE77_iu32, 0x7B8DF67B_iu32, 0xF20DFFF2_iu32, 0x6BBDD66B_iu32, 0x6FB1DE6F_iu32, 0xC55491C5_iu32,
					0x30506030_iu32, 0x01030201_iu32, 0x67A9CE67_iu32, 0x2B7D562B_iu32, 0xFE19E7FE_iu32, 0xD762B5D7_iu32, 0xABE64DAB_iu32, 0x769AEC76_iu32,
					0xCA458FCA_iu32, 0x829D1F82_iu32, 0xC94089C9_iu32, 0x7D87FA7D_iu32, 0xFA15EFFA_iu32, 0x59EBB259_iu32, 0x47C98E47_iu32, 0xF00BFBF0_iu32,
					0xADEC41AD_iu32, 0xD467B3D4_iu32, 0xA2FD5FA2_iu32, 0xAFEA45AF_iu32, 0x9CBF239C_iu32, 0xA4F753A4_iu32, 0x7296E472_iu32, 0xC05B9BC0_iu32,
					0xB7C275B7_iu32, 0xFD1CE1FD_iu32, 0x93AE3D93_iu32, 0x266A4C26_iu32, 0x365A6C36_iu32, 0x3F417E3F_iu32, 0xF702F5F7_iu32, 0xCC4F83CC_iu32,
					0x345C6834_iu32, 0xA5F451A5_iu32, 0xE534D1E5_iu32, 0xF108F9F1_iu32, 0x7193E271_iu32, 0xD873ABD8_iu32, 0x31536231_iu32, 0x153F2A15_iu32,
					0x040C0804_iu32, 0xC75295C7_iu32, 0x23654623_iu32, 0xC35E9DC3_iu32, 0x18283018_iu32, 0x96A13796_iu32, 0x050F0A05_iu32, 0x9AB52F9A_iu32,
					0x07090E07_iu32, 0x12362412_iu32, 0x809B1B80_iu32, 0xE23DDFE2_iu32, 0xEB26CDEB_iu32, 0x27694E27_iu32, 0xB2CD7FB2_iu32, 0x759FEA75_iu32,
					0x091B1209_iu32, 0x839E1D83_iu32, 0x2C74582C_iu32, 0x1A2E341A_iu32, 0x1B2D361B_iu32, 0x6EB2DC6E_iu32, 0x5AEEB45A_iu32, 0xA0FB5BA0_iu32,
					0x52F6A452_iu32, 0x3B4D763B_iu32, 0xD661B7D6_iu32, 0xB3CE7DB3_iu32, 0x297B5229_iu32, 0xE33EDDE3_iu32, 0x2F715E2F_iu32, 0x84971384_iu32,
					0x53F5A653_iu32, 0xD168B9D1_iu32, 0x00000000_iu32, 0xED2CC1ED_iu32, 0x20604020_iu32, 0xFC1FE3FC_iu32, 0xB1C879B1_iu32, 0x5BEDB65B_iu32,
					0x6ABED46A_iu32, 0xCB468DCB_iu32, 0xBED967BE_iu32, 0x394B7239_iu32, 0x4ADE944A_iu32, 0x4CD4984C_iu32, 0x58E8B058_iu32, 0xCF4A85CF_iu32,
					0xD06BBBD0_iu32, 0xEF2AC5EF_iu32, 0xAAE54FAA_iu32, 0xFB16EDFB_iu32, 0x43C58643_iu32, 0x4DD79A4D_iu32, 0x33556633_iu32, 0x85941185_iu32,
					0x45CF8A45_iu32, 0xF910E9F9_iu32, 0x02060402_iu32, 0x7F81FE7F_iu32, 0x50F0A050_iu32, 0x3C44783C_iu32, 0x9FBA259F_iu32, 0xA8E34BA8_iu32,
					0x51F3A251_iu32, 0xA3FE5DA3_iu32, 0x40C08040_iu32, 0x8F8A058F_iu32, 0x92AD3F92_iu32, 0x9DBC219D_iu32, 0x38487038_iu32, 0xF504F1F5_iu32,
					0xBCDF63BC_iu32, 0xB6C177B6_iu32, 0xDA75AFDA_iu32, 0x21634221_iu32, 0x10302010_iu32, 0xFF1AE5FF_iu32, 0xF30EFDF3_iu32, 0xD26DBFD2_iu32,
					0xCD4C81CD_iu32, 0x0C14180C_iu32, 0x13352613_iu32, 0xEC2FC3EC_iu32, 0x5FE1BE5F_iu32, 0x97A23597_iu32, 0x44CC8844_iu32, 0x17392E17_iu32,
					0xC45793C4_iu32, 0xA7F255A7_iu32, 0x7E82FC7E_iu32, 0x3D477A3D_iu32, 0x64ACC864_iu32, 0x5DE7BA5D_iu32, 0x192B3219_iu32, 0x7395E673_iu32,
					0x60A0C060_iu32, 0x81981981_iu32, 0x4FD19E4F_iu32, 0xDC7FA3DC_iu32, 0x22664422_iu32, 0x2A7E542A_iu32, 0x90AB3B90_iu32, 0x88830B88_iu32,
					0x46CA8C46_iu32, 0xEE29C7EE_iu32, 0xB8D36BB8_iu32, 0x143C2814_iu32, 0xDE79A7DE_iu32, 0x5EE2BC5E_iu32, 0x0B1D160B_iu32, 0xDB76ADDB_iu32,
					0xE03BDBE0_iu32, 0x32566432_iu32, 0x3A4E743A_iu32, 0x0A1E140A_iu32, 0x49DB9249_iu32, 0x060A0C06_iu32, 0x246C4824_iu32, 0x5CE4B85C_iu32,
					0xC25D9FC2_iu32, 0xD36EBDD3_iu32, 0xACEF43AC_iu32, 0x62A6C462_iu32, 0x91A83991_iu32, 0x95A43195_iu32, 0xE437D3E4_iu32, 0x798BF279_iu32,
					0xE732D5E7_iu32, 0xC8438BC8_iu32, 0x37596E37_iu32, 0x6DB7DA6D_iu32, 0x8D8C018D_iu32, 0xD564B1D5_iu32, 0x4ED29C4E_iu32, 0xA9E049A9_iu32,
					0x6CB4D86C_iu32, 0x56FAAC56_iu32, 0xF407F3F4_iu32, 0xEA25CFEA_iu32, 0x65AFCA65_iu32, 0x7A8EF47A_iu32, 0xAEE947AE_iu32, 0x08181008_iu32,
					0xBAD56FBA_iu32, 0x7888F078_iu32, 0x256F4A25_iu32, 0x2E725C2E_iu32, 0x1C24381C_iu32, 0xA6F157A6_iu32, 0xB4C773B4_iu32, 0xC65197C6_iu32,
					0xE823CBE8_iu32, 0xDD7CA1DD_iu32, 0x749CE874_iu32, 0x1F213E1F_iu32, 0x4BDD964B_iu32, 0xBDDC61BD_iu32, 0x8B860D8B_iu32, 0x8A850F8A_iu32,
					0x7090E070_iu32, 0x3E427C3E_iu32, 0xB5C471B5_iu32, 0x66AACC66_iu32, 0x48D89048_iu32, 0x03050603_iu32, 0xF601F7F6_iu32, 0x0E121C0E_iu32,
					0x61A3C261_iu32, 0x355F6A35_iu32, 0x57F9AE57_iu32, 0xB9D069B9_iu32, 0x86911786_iu32, 0xC15899C1_iu32, 0x1D273A1D_iu32, 0x9EB9279E_iu32,
					0xE138D9E1_iu32, 0xF813EBF8_iu32, 0x98B32B98_iu32, 0x11332211_iu32, 0x69BBD269_iu32, 0xD970A9D9_iu32, 0x8E89078E_iu32, 0x94A73394_iu32,
					0x9BB62D9B_iu32, 0x1E223C1E_iu32, 0x87921587_iu32, 0xE920C9E9_iu32, 0xCE4987CE_iu32, 0x55FFAA55_iu32, 0x28785028_iu32, 0xDF7AA5DF_iu32,
					0x8C8F038C_iu32, 0xA1F859A1_iu32, 0x89800989_iu32, 0x0D171A0D_iu32, 0xBFDA65BF_iu32, 0xE631D7E6_iu32, 0x42C68442_iu32, 0x68B8D068_iu32,
					0x41C38241_iu32, 0x99B02999_iu32, 0x2D775A2D_iu32, 0x0F111E0F_iu32, 0xB0CB7BB0_iu32, 0x54FCA854_iu32, 0xBBD66DBB_iu32, 0x163A2C16_iu32,
				}
			};

			// 0x235BED0 ~ 256 * 4 * 4 = 4096 bytes
			inline constexpr ZArray<ZArray<IntegerU32, 256_szz>, 4_szz> k_box_32_c = {
				{
					0x51F4A750_iu32, 0x7E416553_iu32, 0x1A17A4C3_iu32, 0x3A275E96_iu32, 0x3BAB6BCB_iu32, 0x1F9D45F1_iu32, 0xACFA58AB_iu32, 0x4BE30393_iu32,
					0x2030FA55_iu32, 0xAD766DF6_iu32, 0x88CC7691_iu32, 0xF5024C25_iu32, 0x4FE5D7FC_iu32, 0xC52ACBD7_iu32, 0x26354480_iu32, 0xB562A38F_iu32,
					0xDEB15A49_iu32, 0x25BA1B67_iu32, 0x45EA0E98_iu32, 0x5DFEC0E1_iu32, 0xC32F7502_iu32, 0x814CF012_iu32, 0x8D4697A3_iu32, 0x6BD3F9C6_iu32,
					0x038F5FE7_iu32, 0x15929C95_iu32, 0xBF6D7AEB_iu32, 0x955259DA_iu32, 0xD4BE832D_iu32, 0x587421D3_iu32, 0x49E06929_iu32, 0x8EC9C844_iu32,
					0x75C2896A_iu32, 0xF48E7978_iu32, 0x99583E6B_iu32, 0x27B971DD_iu32, 0xBEE14FB6_iu32, 0xF088AD17_iu32, 0xC920AC66_iu32, 0x7DCE3AB4_iu32,
					0x63DF4A18_iu32, 0xE51A3182_iu32, 0x97513360_iu32, 0x62537F45_iu32, 0xB16477E0_iu32, 0xBB6BAE84_iu32, 0xFE81A01C_iu32, 0xF9082B94_iu32,
					0x70486858_iu32, 0x8F45FD19_iu32, 0x94DE6C87_iu32, 0x527BF8B7_iu32, 0xAB73D323_iu32, 0x724B02E2_iu32, 0xE31F8F57_iu32, 0x6655AB2A_iu32,
					0xB2EB2807_iu32, 0x2FB5C203_iu32, 0x86C57B9A_iu32, 0xD33708A5_iu32, 0x302887F2_iu32, 0x23BFA5B2_iu32, 0x02036ABA_iu32, 0xED16825C_iu32,
					0x8ACF1C2B_iu32, 0xA779B492_iu32, 0xF307F2F0_iu32, 0x4E69E2A1_iu32, 0x65DAF4CD_iu32, 0x0605BED5_iu32, 0xD134621F_iu32, 0xC4A6FE8A_iu32,
					0x342E539D_iu32, 0xA2F355A0_iu32, 0x058AE132_iu32, 0xA4F6EB75_iu32, 0x0B83EC39_iu32, 0x4060EFAA_iu32, 0x5E719F06_iu32, 0xBD6E1051_iu32,
					0x3E218AF9_iu32, 0x96DD063D_iu32, 0xDD3E05AE_iu32, 0x4DE6BD46_iu32, 0x91548DB5_iu32, 0x71C45D05_iu32, 0x0406D46F_iu32, 0x605015FF_iu32,
					0x1998FB24_iu32, 0xD6BDE997_iu32, 0x894043CC_iu32, 0x67D99E77_iu32, 0xB0E842BD_iu32, 0x07898B88_iu32, 0xE7195B38_iu32, 0x79C8EEDB_iu32,
					0xA17C0A47_iu32, 0x7C420FE9_iu32, 0xF8841EC9_iu32, 0x00000000_iu32, 0x09808683_iu32, 0x322BED48_iu32, 0x1E1170AC_iu32, 0x6C5A724E_iu32,
					0xFD0EFFFB_iu32, 0x0F853856_iu32, 0x3DAED51E_iu32, 0x362D3927_iu32, 0x0A0FD964_iu32, 0x685CA621_iu32, 0x9B5B54D1_iu32, 0x24362E3A_iu32,
					0x0C0A67B1_iu32, 0x9357E70F_iu32, 0xB4EE96D2_iu32, 0x1B9B919E_iu32, 0x80C0C54F_iu32, 0x61DC20A2_iu32, 0x5A774B69_iu32, 0x1C121A16_iu32,
					0xE293BA0A_iu32, 0xC0A02AE5_iu32, 0x3C22E043_iu32, 0x121B171D_iu32, 0x0E090D0B_iu32, 0xF28BC7AD_iu32, 0x2DB6A8B9_iu32, 0x141EA9C8_iu32,
					0x57F11985_iu32, 0xAF75074C_iu32, 0xEE99DDBB_iu32, 0xA37F60FD_iu32, 0xF701269F_iu32, 0x5C72F5BC_iu32, 0x44663BC5_iu32, 0x5BFB7E34_iu32,
					0x8B432976_iu32, 0xCB23C6DC_iu32, 0xB6EDFC68_iu32, 0xB8E4F163_iu32, 0xD731DCCA_iu32, 0x42638510_iu32, 0x13972240_iu32, 0x84C61120_iu32,
					0x854A247D_iu32, 0xD2BB3DF8_iu32, 0xAEF93211_iu32, 0xC729A16D_iu32, 0x1D9E2F4B_iu32, 0xDCB230F3_iu32, 0x0D8652EC_iu32, 0x77C1E3D0_iu32,
					0x2BB3166C_iu32, 0xA970B999_iu32, 0x119448FA_iu32, 0x47E96422_iu32, 0xA8FC8CC4_iu32, 0xA0F03F1A_iu32, 0x567D2CD8_iu32, 0x223390EF_iu32,
					0x87494EC7_iu32, 0xD938D1C1_iu32, 0x8CCAA2FE_iu32, 0x98D40B36_iu32, 0xA6F581CF_iu32, 0xA57ADE28_iu32, 0xDAB78E26_iu32, 0x3FADBFA4_iu32,
					0x2C3A9DE4_iu32, 0x5078920D_iu32, 0x6A5FCC9B_iu32, 0x547E4662_iu32, 0xF68D13C2_iu32, 0x90D8B8E8_iu32, 0x2E39F75E_iu32, 0x82C3AFF5_iu32,
					0x9F5D80BE_iu32, 0x69D0937C_iu32, 0x6FD52DA9_iu32, 0xCF2512B3_iu32, 0xC8AC993B_iu32, 0x10187DA7_iu32, 0xE89C636E_iu32, 0xDB3BBB7B_iu32,
					0xCD267809_iu32, 0x6E5918F4_iu32, 0xEC9AB701_iu32, 0x834F9AA8_iu32, 0xE6956E65_iu32, 0xAAFFE67E_iu32, 0x21BCCF08_iu32, 0xEF15E8E6_iu32,
					0xBAE79BD9_iu32, 0x4A6F36CE_iu32, 0xEA9F09D4_iu32, 0x29B07CD6_iu32, 0x31A4B2AF_iu32, 0x2A3F2331_iu32, 0xC6A59430_iu32, 0x35A266C0_iu32,
					0x744EBC37_iu32, 0xFC82CAA6_iu32, 0xE090D0B0_iu32, 0x33A7D815_iu32, 0xF104984A_iu32, 0x41ECDAF7_iu32, 0x7FCD500E_iu32, 0x1791F62F_iu32,
					0x764DD68D_iu32, 0x43EFB04D_iu32, 0xCCAA4D54_iu32, 0xE49604DF_iu32, 0x9ED1B5E3_iu32, 0x4C6A881B_iu32, 0xC12C1FB8_iu32, 0x4665517F_iu32,
					0x9D5EEA04_iu32, 0x018C355D_iu32, 0xFA877473_iu32, 0xFB0B412E_iu32, 0xB3671D5A_iu32, 0x92DBD252_iu32, 0xE9105633_iu32, 0x6DD64713_iu32,
					0x9AD7618C_iu32, 0x37A10C7A_iu32, 0x59F8148E_iu32, 0xEB133C89_iu32, 0xCEA927EE_iu32, 0xB761C935_iu32, 0xE11CE5ED_iu32, 0x7A47B13C_iu32,
					0x9CD2DF59_iu32, 0x55F2733F_iu32, 0x1814CE79_iu32, 0x73C737BF_iu32, 0x53F7CDEA_iu32, 0x5FFDAA5B_iu32, 0xDF3D6F14_iu32, 0x7844DB86_iu32,
					0xCAAFF381_iu32, 0xB968C43E_iu32, 0x3824342C_iu32, 0xC2A3405F_iu32, 0x161DC372_iu32, 0xBCE2250C_iu32, 0x283C498B_iu32, 0xFF0D9541_iu32,
					0x39A80171_iu32, 0x080CB3DE_iu32, 0xD8B4E49C_iu32, 0x6456C190_iu32, 0x7BCB8461_iu32, 0xD532B670_iu32, 0x486C5C74_iu32, 0xD0B85742_iu32,
				},
				{
					0xF4A75051_iu32, 0x4165537E_iu32, 0x17A4C31A_iu32, 0x275E963A_iu32, 0xAB6BCB3B_iu32, 0x9D45F11F_iu32, 0xFA58ABAC_iu32, 0xE303934B_iu32,
					0x30FA5520_iu32, 0x766DF6AD_iu32, 0xCC769188_iu32, 0x024C25F5_iu32, 0xE5D7FC4F_iu32, 0x2ACBD7C5_iu32, 0x35448026_iu32, 0x62A38FB5_iu32,
					0xB15A49DE_iu32, 0xBA1B6725_iu32, 0xEA0E9845_iu32, 0xFEC0E15D_iu32, 0x2F7502C3_iu32, 0x4CF01281_iu32, 0x4697A38D_iu32, 0xD3F9C66B_iu32,
					0x8F5FE703_iu32, 0x929C9515_iu32, 0x6D7AEBBF_iu32, 0x5259DA95_iu32, 0xBE832DD4_iu32, 0x7421D358_iu32, 0xE0692949_iu32, 0xC9C8448E_iu32,
					0xC2896A75_iu32, 0x8E7978F4_iu32, 0x583E6B99_iu32, 0xB971DD27_iu32, 0xE14FB6BE_iu32, 0x88AD17F0_iu32, 0x20AC66C9_iu32, 0xCE3AB47D_iu32,
					0xDF4A1863_iu32, 0x1A3182E5_iu32, 0x51336097_iu32, 0x537F4562_iu32, 0x6477E0B1_iu32, 0x6BAE84BB_iu32, 0x81A01CFE_iu32, 0x082B94F9_iu32,
					0x48685870_iu32, 0x45FD198F_iu32, 0xDE6C8794_iu32, 0x7BF8B752_iu32, 0x73D323AB_iu32, 0x4B02E272_iu32, 0x1F8F57E3_iu32, 0x55AB2A66_iu32,
					0xEB2807B2_iu32, 0xB5C2032F_iu32, 0xC57B9A86_iu32, 0x3708A5D3_iu32, 0x2887F230_iu32, 0xBFA5B223_iu32, 0x036ABA02_iu32, 0x16825CED_iu32,
					0xCF1C2B8A_iu32, 0x79B492A7_iu32, 0x07F2F0F3_iu32, 0x69E2A14E_iu32, 0xDAF4CD65_iu32, 0x05BED506_iu32, 0x34621FD1_iu32, 0xA6FE8AC4_iu32,
					0x2E539D34_iu32, 0xF355A0A2_iu32, 0x8AE13205_iu32, 0xF6EB75A4_iu32, 0x83EC390B_iu32, 0x60EFAA40_iu32, 0x719F065E_iu32, 0x6E1051BD_iu32,
					0x218AF93E_iu32, 0xDD063D96_iu32, 0x3E05AEDD_iu32, 0xE6BD464D_iu32, 0x548DB591_iu32, 0xC45D0571_iu32, 0x06D46F04_iu32, 0x5015FF60_iu32,
					0x98FB2419_iu32, 0xBDE997D6_iu32, 0x4043CC89_iu32, 0xD99E7767_iu32, 0xE842BDB0_iu32, 0x898B8807_iu32, 0x195B38E7_iu32, 0xC8EEDB79_iu32,
					0x7C0A47A1_iu32, 0x420FE97C_iu32, 0x841EC9F8_iu32, 0x00000000_iu32, 0x80868309_iu32, 0x2BED4832_iu32, 0x1170AC1E_iu32, 0x5A724E6C_iu32,
					0x0EFFFBFD_iu32, 0x8538560F_iu32, 0xAED51E3D_iu32, 0x2D392736_iu32, 0x0FD9640A_iu32, 0x5CA62168_iu32, 0x5B54D19B_iu32, 0x362E3A24_iu32,
					0x0A67B10C_iu32, 0x57E70F93_iu32, 0xEE96D2B4_iu32, 0x9B919E1B_iu32, 0xC0C54F80_iu32, 0xDC20A261_iu32, 0x774B695A_iu32, 0x121A161C_iu32,
					0x93BA0AE2_iu32, 0xA02AE5C0_iu32, 0x22E0433C_iu32, 0x1B171D12_iu32, 0x090D0B0E_iu32, 0x8BC7ADF2_iu32, 0xB6A8B92D_iu32, 0x1EA9C814_iu32,
					0xF1198557_iu32, 0x75074CAF_iu32, 0x99DDBBEE_iu32, 0x7F60FDA3_iu32, 0x01269FF7_iu32, 0x72F5BC5C_iu32, 0x663BC544_iu32, 0xFB7E345B_iu32,
					0x4329768B_iu32, 0x23C6DCCB_iu32, 0xEDFC68B6_iu32, 0xE4F163B8_iu32, 0x31DCCAD7_iu32, 0x63851042_iu32, 0x97224013_iu32, 0xC6112084_iu32,
					0x4A247D85_iu32, 0xBB3DF8D2_iu32, 0xF93211AE_iu32, 0x29A16DC7_iu32, 0x9E2F4B1D_iu32, 0xB230F3DC_iu32, 0x8652EC0D_iu32, 0xC1E3D077_iu32,
					0xB3166C2B_iu32, 0x70B999A9_iu32, 0x9448FA11_iu32, 0xE9642247_iu32, 0xFC8CC4A8_iu32, 0xF03F1AA0_iu32, 0x7D2CD856_iu32, 0x3390EF22_iu32,
					0x494EC787_iu32, 0x38D1C1D9_iu32, 0xCAA2FE8C_iu32, 0xD40B3698_iu32, 0xF581CFA6_iu32, 0x7ADE28A5_iu32, 0xB78E26DA_iu32, 0xADBFA43F_iu32,
					0x3A9DE42C_iu32, 0x78920D50_iu32, 0x5FCC9B6A_iu32, 0x7E466254_iu32, 0x8D13C2F6_iu32, 0xD8B8E890_iu32, 0x39F75E2E_iu32, 0xC3AFF582_iu32,
					0x5D80BE9F_iu32, 0xD0937C69_iu32, 0xD52DA96F_iu32, 0x2512B3CF_iu32, 0xAC993BC8_iu32, 0x187DA710_iu32, 0x9C636EE8_iu32, 0x3BBB7BDB_iu32,
					0x267809CD_iu32, 0x5918F46E_iu32, 0x9AB701EC_iu32, 0x4F9AA883_iu32, 0x956E65E6_iu32, 0xFFE67EAA_iu32, 0xBCCF0821_iu32, 0x15E8E6EF_iu32,
					0xE79BD9BA_iu32, 0x6F36CE4A_iu32, 0x9F09D4EA_iu32, 0xB07CD629_iu32, 0xA4B2AF31_iu32, 0x3F23312A_iu32, 0xA59430C6_iu32, 0xA266C035_iu32,
					0x4EBC3774_iu32, 0x82CAA6FC_iu32, 0x90D0B0E0_iu32, 0xA7D81533_iu32, 0x04984AF1_iu32, 0xECDAF741_iu32, 0xCD500E7F_iu32, 0x91F62F17_iu32,
					0x4DD68D76_iu32, 0xEFB04D43_iu32, 0xAA4D54CC_iu32, 0x9604DFE4_iu32, 0xD1B5E39E_iu32, 0x6A881B4C_iu32, 0x2C1FB8C1_iu32, 0x65517F46_iu32,
					0x5EEA049D_iu32, 0x8C355D01_iu32, 0x877473FA_iu32, 0x0B412EFB_iu32, 0x671D5AB3_iu32, 0xDBD25292_iu32, 0x105633E9_iu32, 0xD647136D_iu32,
					0xD7618C9A_iu32, 0xA10C7A37_iu32, 0xF8148E59_iu32, 0x133C89EB_iu32, 0xA927EECE_iu32, 0x61C935B7_iu32, 0x1CE5EDE1_iu32, 0x47B13C7A_iu32,
					0xD2DF599C_iu32, 0xF2733F55_iu32, 0x14CE7918_iu32, 0xC737BF73_iu32, 0xF7CDEA53_iu32, 0xFDAA5B5F_iu32, 0x3D6F14DF_iu32, 0x44DB8678_iu32,
					0xAFF381CA_iu32, 0x68C43EB9_iu32, 0x24342C38_iu32, 0xA3405FC2_iu32, 0x1DC37216_iu32, 0xE2250CBC_iu32, 0x3C498B28_iu32, 0x0D9541FF_iu32,
					0xA8017139_iu32, 0x0CB3DE08_iu32, 0xB4E49CD8_iu32, 0x56C19064_iu32, 0xCB84617B_iu32, 0x32B670D5_iu32, 0x6C5C7448_iu32, 0xB85742D0_iu32,
				},
				{
					0x5051F4A7_iu32, 0x537E4165_iu32, 0xC31A17A4_iu32, 0x963A275E_iu32, 0xCB3BAB6B_iu32, 0xF11F9D45_iu32, 0xABACFA58_iu32, 0x934BE303_iu32,
					0x552030FA_iu32, 0xF6AD766D_iu32, 0x9188CC76_iu32, 0x25F5024C_iu32, 0xFC4FE5D7_iu32, 0xD7C52ACB_iu32, 0x80263544_iu32, 0x8FB562A3_iu32,
					0x49DEB15A_iu32, 0x6725BA1B_iu32, 0x9845EA0E_iu32, 0xE15DFEC0_iu32, 0x02C32F75_iu32, 0x12814CF0_iu32, 0xA38D4697_iu32, 0xC66BD3F9_iu32,
					0xE7038F5F_iu32, 0x9515929C_iu32, 0xEBBF6D7A_iu32, 0xDA955259_iu32, 0x2DD4BE83_iu32, 0xD3587421_iu32, 0x2949E069_iu32, 0x448EC9C8_iu32,
					0x6A75C289_iu32, 0x78F48E79_iu32, 0x6B99583E_iu32, 0xDD27B971_iu32, 0xB6BEE14F_iu32, 0x17F088AD_iu32, 0x66C920AC_iu32, 0xB47DCE3A_iu32,
					0x1863DF4A_iu32, 0x82E51A31_iu32, 0x60975133_iu32, 0x4562537F_iu32, 0xE0B16477_iu32, 0x84BB6BAE_iu32, 0x1CFE81A0_iu32, 0x94F9082B_iu32,
					0x58704868_iu32, 0x198F45FD_iu32, 0x8794DE6C_iu32, 0xB7527BF8_iu32, 0x23AB73D3_iu32, 0xE2724B02_iu32, 0x57E31F8F_iu32, 0x2A6655AB_iu32,
					0x07B2EB28_iu32, 0x032FB5C2_iu32, 0x9A86C57B_iu32, 0xA5D33708_iu32, 0xF2302887_iu32, 0xB223BFA5_iu32, 0xBA02036A_iu32, 0x5CED1682_iu32,
					0x2B8ACF1C_iu32, 0x92A779B4_iu32, 0xF0F307F2_iu32, 0xA14E69E2_iu32, 0xCD65DAF4_iu32, 0xD50605BE_iu32, 0x1FD13462_iu32, 0x8AC4A6FE_iu32,
					0x9D342E53_iu32, 0xA0A2F355_iu32, 0x32058AE1_iu32, 0x75A4F6EB_iu32, 0x390B83EC_iu32, 0xAA4060EF_iu32, 0x065E719F_iu32, 0x51BD6E10_iu32,
					0xF93E218A_iu32, 0x3D96DD06_iu32, 0xAEDD3E05_iu32, 0x464DE6BD_iu32, 0xB591548D_iu32, 0x0571C45D_iu32, 0x6F0406D4_iu32, 0xFF605015_iu32,
					0x241998FB_iu32, 0x97D6BDE9_iu32, 0xCC894043_iu32, 0x7767D99E_iu32, 0xBDB0E842_iu32, 0x8807898B_iu32, 0x38E7195B_iu32, 0xDB79C8EE_iu32,
					0x47A17C0A_iu32, 0xE97C420F_iu32, 0xC9F8841E_iu32, 0x00000000_iu32, 0x83098086_iu32, 0x48322BED_iu32, 0xAC1E1170_iu32, 0x4E6C5A72_iu32,
					0xFBFD0EFF_iu32, 0x560F8538_iu32, 0x1E3DAED5_iu32, 0x27362D39_iu32, 0x640A0FD9_iu32, 0x21685CA6_iu32, 0xD19B5B54_iu32, 0x3A24362E_iu32,
					0xB10C0A67_iu32, 0x0F9357E7_iu32, 0xD2B4EE96_iu32, 0x9E1B9B91_iu32, 0x4F80C0C5_iu32, 0xA261DC20_iu32, 0x695A774B_iu32, 0x161C121A_iu32,
					0x0AE293BA_iu32, 0xE5C0A02A_iu32, 0x433C22E0_iu32, 0x1D121B17_iu32, 0x0B0E090D_iu32, 0xADF28BC7_iu32, 0xB92DB6A8_iu32, 0xC8141EA9_iu32,
					0x8557F119_iu32, 0x4CAF7507_iu32, 0xBBEE99DD_iu32, 0xFDA37F60_iu32, 0x9FF70126_iu32, 0xBC5C72F5_iu32, 0xC544663B_iu32, 0x345BFB7E_iu32,
					0x768B4329_iu32, 0xDCCB23C6_iu32, 0x68B6EDFC_iu32, 0x63B8E4F1_iu32, 0xCAD731DC_iu32, 0x10426385_iu32, 0x40139722_iu32, 0x2084C611_iu32,
					0x7D854A24_iu32, 0xF8D2BB3D_iu32, 0x11AEF932_iu32, 0x6DC729A1_iu32, 0x4B1D9E2F_iu32, 0xF3DCB230_iu32, 0xEC0D8652_iu32, 0xD077C1E3_iu32,
					0x6C2BB316_iu32, 0x99A970B9_iu32, 0xFA119448_iu32, 0x2247E964_iu32, 0xC4A8FC8C_iu32, 0x1AA0F03F_iu32, 0xD8567D2C_iu32, 0xEF223390_iu32,
					0xC787494E_iu32, 0xC1D938D1_iu32, 0xFE8CCAA2_iu32, 0x3698D40B_iu32, 0xCFA6F581_iu32, 0x28A57ADE_iu32, 0x26DAB78E_iu32, 0xA43FADBF_iu32,
					0xE42C3A9D_iu32, 0x0D507892_iu32, 0x9B6A5FCC_iu32, 0x62547E46_iu32, 0xC2F68D13_iu32, 0xE890D8B8_iu32, 0x5E2E39F7_iu32, 0xF582C3AF_iu32,
					0xBE9F5D80_iu32, 0x7C69D093_iu32, 0xA96FD52D_iu32, 0xB3CF2512_iu32, 0x3BC8AC99_iu32, 0xA710187D_iu32, 0x6EE89C63_iu32, 0x7BDB3BBB_iu32,
					0x09CD2678_iu32, 0xF46E5918_iu32, 0x01EC9AB7_iu32, 0xA8834F9A_iu32, 0x65E6956E_iu32, 0x7EAAFFE6_iu32, 0x0821BCCF_iu32, 0xE6EF15E8_iu32,
					0xD9BAE79B_iu32, 0xCE4A6F36_iu32, 0xD4EA9F09_iu32, 0xD629B07C_iu32, 0xAF31A4B2_iu32, 0x312A3F23_iu32, 0x30C6A594_iu32, 0xC035A266_iu32,
					0x37744EBC_iu32, 0xA6FC82CA_iu32, 0xB0E090D0_iu32, 0x1533A7D8_iu32, 0x4AF10498_iu32, 0xF741ECDA_iu32, 0x0E7FCD50_iu32, 0x2F1791F6_iu32,
					0x8D764DD6_iu32, 0x4D43EFB0_iu32, 0x54CCAA4D_iu32, 0xDFE49604_iu32, 0xE39ED1B5_iu32, 0x1B4C6A88_iu32, 0xB8C12C1F_iu32, 0x7F466551_iu32,
					0x049D5EEA_iu32, 0x5D018C35_iu32, 0x73FA8774_iu32, 0x2EFB0B41_iu32, 0x5AB3671D_iu32, 0x5292DBD2_iu32, 0x33E91056_iu32, 0x136DD647_iu32,
					0x8C9AD761_iu32, 0x7A37A10C_iu32, 0x8E59F814_iu32, 0x89EB133C_iu32, 0xEECEA927_iu32, 0x35B761C9_iu32, 0xEDE11CE5_iu32, 0x3C7A47B1_iu32,
					0x599CD2DF_iu32, 0x3F55F273_iu32, 0x791814CE_iu32, 0xBF73C737_iu32, 0xEA53F7CD_iu32, 0x5B5FFDAA_iu32, 0x14DF3D6F_iu32, 0x867844DB_iu32,
					0x81CAAFF3_iu32, 0x3EB968C4_iu32, 0x2C382434_iu32, 0x5FC2A340_iu32, 0x72161DC3_iu32, 0x0CBCE225_iu32, 0x8B283C49_iu32, 0x41FF0D95_iu32,
					0x7139A801_iu32, 0xDE080CB3_iu32, 0x9CD8B4E4_iu32, 0x906456C1_iu32, 0x617BCB84_iu32, 0x70D532B6_iu32, 0x74486C5C_iu32, 0x42D0B857_iu32,
				},
				{
					0xA75051F4_iu32, 0x65537E41_iu32, 0xA4C31A17_iu32, 0x5E963A27_iu32, 0x6BCB3BAB_iu32, 0x45F11F9D_iu32, 0x58ABACFA_iu32, 0x03934BE3_iu32,
					0xFA552030_iu32, 0x6DF6AD76_iu32, 0x769188CC_iu32, 0x4C25F502_iu32, 0xD7FC4FE5_iu32, 0xCBD7C52A_iu32, 0x44802635_iu32, 0xA38FB562_iu32,
					0x5A49DEB1_iu32, 0x1B6725BA_iu32, 0x0E9845EA_iu32, 0xC0E15DFE_iu32, 0x7502C32F_iu32, 0xF012814C_iu32, 0x97A38D46_iu32, 0xF9C66BD3_iu32,
					0x5FE7038F_iu32, 0x9C951592_iu32, 0x7AEBBF6D_iu32, 0x59DA9552_iu32, 0x832DD4BE_iu32, 0x21D35874_iu32, 0x692949E0_iu32, 0xC8448EC9_iu32,
					0x896A75C2_iu32, 0x7978F48E_iu32, 0x3E6B9958_iu32, 0x71DD27B9_iu32, 0x4FB6BEE1_iu32, 0xAD17F088_iu32, 0xAC66C920_iu32, 0x3AB47DCE_iu32,
					0x4A1863DF_iu32, 0x3182E51A_iu32, 0x33609751_iu32, 0x7F456253_iu32, 0x77E0B164_iu32, 0xAE84BB6B_iu32, 0xA01CFE81_iu32, 0x2B94F908_iu32,
					0x68587048_iu32, 0xFD198F45_iu32, 0x6C8794DE_iu32, 0xF8B7527B_iu32, 0xD323AB73_iu32, 0x02E2724B_iu32, 0x8F57E31F_iu32, 0xAB2A6655_iu32,
					0x2807B2EB_iu32, 0xC2032FB5_iu32, 0x7B9A86C5_iu32, 0x08A5D337_iu32, 0x87F23028_iu32, 0xA5B223BF_iu32, 0x6ABA0203_iu32, 0x825CED16_iu32,
					0x1C2B8ACF_iu32, 0xB492A779_iu32, 0xF2F0F307_iu32, 0xE2A14E69_iu32, 0xF4CD65DA_iu32, 0xBED50605_iu32, 0x621FD134_iu32, 0xFE8AC4A6_iu32,
					0x539D342E_iu32, 0x55A0A2F3_iu32, 0xE132058A_iu32, 0xEB75A4F6_iu32, 0xEC390B83_iu32, 0xEFAA4060_iu32, 0x9F065E71_iu32, 0x1051BD6E_iu32,
					0x8AF93E21_iu32, 0x063D96DD_iu32, 0x05AEDD3E_iu32, 0xBD464DE6_iu32, 0x8DB59154_iu32, 0x5D0571C4_iu32, 0xD46F0406_iu32, 0x15FF6050_iu32,
					0xFB241998_iu32, 0xE997D6BD_iu32, 0x43CC8940_iu32, 0x9E7767D9_iu32, 0x42BDB0E8_iu32, 0x8B880789_iu32, 0x5B38E719_iu32, 0xEEDB79C8_iu32,
					0x0A47A17C_iu32, 0x0FE97C42_iu32, 0x1EC9F884_iu32, 0x00000000_iu32, 0x86830980_iu32, 0xED48322B_iu32, 0x70AC1E11_iu32, 0x724E6C5A_iu32,
					0xFFFBFD0E_iu32, 0x38560F85_iu32, 0xD51E3DAE_iu32, 0x3927362D_iu32, 0xD9640A0F_iu32, 0xA621685C_iu32, 0x54D19B5B_iu32, 0x2E3A2436_iu32,
					0x67B10C0A_iu32, 0xE70F9357_iu32, 0x96D2B4EE_iu32, 0x919E1B9B_iu32, 0xC54F80C0_iu32, 0x20A261DC_iu32, 0x4B695A77_iu32, 0x1A161C12_iu32,
					0xBA0AE293_iu32, 0x2AE5C0A0_iu32, 0xE0433C22_iu32, 0x171D121B_iu32, 0x0D0B0E09_iu32, 0xC7ADF28B_iu32, 0xA8B92DB6_iu32, 0xA9C8141E_iu32,
					0x198557F1_iu32, 0x074CAF75_iu32, 0xDDBBEE99_iu32, 0x60FDA37F_iu32, 0x269FF701_iu32, 0xF5BC5C72_iu32, 0x3BC54466_iu32, 0x7E345BFB_iu32,
					0x29768B43_iu32, 0xC6DCCB23_iu32, 0xFC68B6ED_iu32, 0xF163B8E4_iu32, 0xDCCAD731_iu32, 0x85104263_iu32, 0x22401397_iu32, 0x112084C6_iu32,
					0x247D854A_iu32, 0x3DF8D2BB_iu32, 0x3211AEF9_iu32, 0xA16DC729_iu32, 0x2F4B1D9E_iu32, 0x30F3DCB2_iu32, 0x52EC0D86_iu32, 0xE3D077C1_iu32,
					0x166C2BB3_iu32, 0xB999A970_iu32, 0x48FA1194_iu32, 0x642247E9_iu32, 0x8CC4A8FC_iu32, 0x3F1AA0F0_iu32, 0x2CD8567D_iu32, 0x90EF2233_iu32,
					0x4EC78749_iu32, 0xD1C1D938_iu32, 0xA2FE8CCA_iu32, 0x0B3698D4_iu32, 0x81CFA6F5_iu32, 0xDE28A57A_iu32, 0x8E26DAB7_iu32, 0xBFA43FAD_iu32,
					0x9DE42C3A_iu32, 0x920D5078_iu32, 0xCC9B6A5F_iu32, 0x4662547E_iu32, 0x13C2F68D_iu32, 0xB8E890D8_iu32, 0xF75E2E39_iu32, 0xAFF582C3_iu32,
					0x80BE9F5D_iu32, 0x937C69D0_iu32, 0x2DA96FD5_iu32, 0x12B3CF25_iu32, 0x993BC8AC_iu32, 0x7DA71018_iu32, 0x636EE89C_iu32, 0xBB7BDB3B_iu32,
					0x7809CD26_iu32, 0x18F46E59_iu32, 0xB701EC9A_iu32, 0x9AA8834F_iu32, 0x6E65E695_iu32, 0xE67EAAFF_iu32, 0xCF0821BC_iu32, 0xE8E6EF15_iu32,
					0x9BD9BAE7_iu32, 0x36CE4A6F_iu32, 0x09D4EA9F_iu32, 0x7CD629B0_iu32, 0xB2AF31A4_iu32, 0x23312A3F_iu32, 0x9430C6A5_iu32, 0x66C035A2_iu32,
					0xBC37744E_iu32, 0xCAA6FC82_iu32, 0xD0B0E090_iu32, 0xD81533A7_iu32, 0x984AF104_iu32, 0xDAF741EC_iu32, 0x500E7FCD_iu32, 0xF62F1791_iu32,
					0xD68D764D_iu32, 0xB04D43EF_iu32, 0x4D54CCAA_iu32, 0x04DFE496_iu32, 0xB5E39ED1_iu32, 0x881B4C6A_iu32, 0x1FB8C12C_iu32, 0x517F4665_iu32,
					0xEA049D5E_iu32, 0x355D018C_iu32, 0x7473FA87_iu32, 0x412EFB0B_iu32, 0x1D5AB367_iu32, 0xD25292DB_iu32, 0x5633E910_iu32, 0x47136DD6_iu32,
					0x618C9AD7_iu32, 0x0C7A37A1_iu32, 0x148E59F8_iu32, 0x3C89EB13_iu32, 0x27EECEA9_iu32, 0xC935B761_iu32, 0xE5EDE11C_iu32, 0xB13C7A47_iu32,
					0xDF599CD2_iu32, 0x733F55F2_iu32, 0xCE791814_iu32, 0x37BF73C7_iu32, 0xCDEA53F7_iu32, 0xAA5B5FFD_iu32, 0x6F14DF3D_iu32, 0xDB867844_iu32,
					0xF381CAAF_iu32, 0xC43EB968_iu32, 0x342C3824_iu32, 0x405FC2A3_iu32, 0xC372161D_iu32, 0x250CBCE2_iu32, 0x498B283C_iu32, 0x9541FF0D_iu32,
					0x017139A8_iu32, 0xB3DE080C_iu32, 0xE49CD8B4_iu32, 0xC1906456_iu32, 0x84617BCB_iu32, 0xB670D532_iu32, 0x5C74486C_iu32, 0x5742D0B8_iu32,
				}
			};

			// ----------------

			inline constexpr auto k_valid_block_size = StaticArray<Size, 3_szz>{{4_sz, 6_sz, 8_sz}};

			inline constexpr auto k_max_block_size = Size{8_sz};

			inline constexpr auto k_order_section_count_base_value = Size{7_sz};

			#pragma endregion

			#pragma region function

			inline auto make_order_section_list (
				CListView<IntegerU32> const & initial_buffer_section,
				Size const &                  buffer_block_count,
				VListView<IntegerU32> const & order_section_list_a,
				VListView<IntegerU32> const & order_section_list_b,
				Size const &                  order_block_count,
				Size const &                  order_section_count
			) -> Void {
				auto buffer_section = Array<IntegerU32>{k_max_block_size};
				auto order_list_block_count = order_section_count * order_block_count;
				for (auto & index : SizeRange{buffer_block_count}) {
					buffer_section[index] = reverse_endian(initial_buffer_section[index]);
				}
				auto order_list_block_index = 1_ix;
				while (order_list_block_index < buffer_block_count) {
					order_section_list_a[order_list_block_index] = buffer_section[order_list_block_index];
					++order_list_block_index;
				}
				while (order_list_block_index < order_list_block_count) {
					auto buffer = buffer_section[buffer_block_count - k_next_index];
					buffer_section[1_ix] ^=
						cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer, 4_ix).value]) << 0_sz ^
						cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer, 3_ix).value]) << 24_sz ^
						cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer, 2_ix).value]) << 16_sz ^
						cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer, 1_ix).value]) << 8_sz ^
						cbw<IntegerU32>(k_box_8_a[(order_list_block_index / buffer_block_count - k_next_index).value]) << 24_sz;
					if (buffer_block_count == 8_sz) {
						buffer_section[2_ix] ^= buffer_section[1_ix];
						buffer_section[3_ix] ^= buffer_section[2_ix];
						buffer_section[4_ix] ^= buffer_section[3_ix];
						buffer_section[5_ix] ^=
							cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section[4_ix], 4_ix).value]) << 24_sz ^
							cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section[4_ix], 3_ix).value]) << 16_sz ^
							cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section[4_ix], 2_ix).value]) << 8_sz ^
							cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section[4_ix], 1_ix).value]) << 0_sz;
						buffer_section[6_ix] ^= buffer_section[5_ix];
						buffer_section[7_ix] ^= buffer_section[6_ix];
						buffer_section[8_ix] ^= buffer_section[7_ix];
					} else {
						for (auto & buffer_block_index : SizeRange{buffer_block_count - 1_sz}) {
							buffer_section[buffer_block_index + k_next_index] ^= buffer_section[buffer_block_index];
						}
					}
					for (auto buffer_block_index = k_begin_index; buffer_block_index < buffer_block_count && order_list_block_index < order_list_block_count; ++buffer_block_index, ++order_list_block_index) {
						order_section_list_a[order_list_block_index] = buffer_section[buffer_block_index];
					}
				}
				for (auto & order_section_index : SizeRange{order_section_count}) {
					Range::assign_from(
						order_section_list_b.sub(order_block_count * order_section_index, order_block_count),
						order_section_list_a.sub(order_block_count * (order_section_count - 1_sz - order_section_index), order_block_count)
					);
				}
				for (auto & order_section_index : SizeRange{2_ix, order_section_count - 1_sz}) {
					for (auto & order_block_index : SizeRange{order_block_count}) {
						auto & dest_value = order_section_list_b[order_block_count * order_section_index + order_block_index];
						dest_value =
							k_box_32_a[4_ixz][byte_nth_of(dest_value, 4_ix).value] ^
							k_box_32_a[1_ixz][byte_nth_of(dest_value, 3_ix).value] ^
							k_box_32_a[2_ixz][byte_nth_of(dest_value, 2_ix).value] ^
							k_box_32_a[3_ixz][byte_nth_of(dest_value, 1_ix).value];
					}
				}
				return;
			}

			#pragma endregion

		}

	}

	namespace Encrypt {

		namespace Detail {

			#pragma region using

			using namespace Common::Detail;

			#pragma endregion

			#pragma region parameter

			inline constexpr auto k_argument_x_16 = StaticArray<Size, 4_szz>{{1_ix, 2_ix, 3_ix, 4_ix}};

			inline constexpr auto k_argument_x_24 = StaticArray<Size, 4_szz>{{1_ix, 2_ix, 3_ix, 4_ix}};

			inline constexpr auto k_argument_x_32 = StaticArray<Size, 4_szz>{{1_ix, 2_ix, 4_ix, 5_ix}};

			#pragma endregion

			#pragma region process

			inline auto process_section (
				CListView<IntegerU32> const & key_section,
				CListView<IntegerU32> const & order_section_list,
				Size const &                  order_section_count,
				CListView<IntegerU32> const & source_data_section,
				VListView<IntegerU32> const & dest_data_section,
				Size const &                  block_size,
				CListView<Size> const &       argument_x,
				Array<IntegerU32> &           buffer_section_a,
				Array<IntegerU32> &           buffer_section_b
			) -> Void {
				for (auto & index : SizeRange{block_size}) {
					buffer_section_a[index] = reverse_endian(source_data_section[index] ^ key_section[index]) ^ order_section_list[index];
				}
				for (auto & block_index : SizeRange{2_ix, order_section_count - 1_sz}) {
					for (auto & index : SizeRange{block_size}) {
						buffer_section_b[index] =
							order_section_list[block_size * block_index + index] ^
							k_box_32_b[2_ixz][byte_nth_of(buffer_section_a[(index + argument_x[4_ix]) % block_size], 1_ix).value] ^
							k_box_32_b[4_ixz][byte_nth_of(buffer_section_a[(index + argument_x[3_ix]) % block_size], 2_ix).value] ^
							k_box_32_b[3_ixz][byte_nth_of(buffer_section_a[(index + argument_x[2_ix]) % block_size], 3_ix).value] ^
							k_box_32_b[1_ixz][byte_nth_of(buffer_section_a[(index + argument_x[1_ix]) % block_size], 4_ix).value];
					}
					Range::assign_from(
						buffer_section_a.head(block_size),
						buffer_section_b.head(block_size)
					);
				}
				for (auto & index : SizeRange{block_size}) {
					dest_data_section[index] =
						(cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section_a[(index + argument_x[4_ix]) % block_size], 1_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 1_ix))) << 24_sz |
						(cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section_a[(index + argument_x[3_ix]) % block_size], 2_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 2_ix))) << 16_sz |
						(cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section_a[(index + argument_x[2_ix]) % block_size], 3_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 3_ix))) << 8_sz |
						(cbw<IntegerU32>(k_box_8_b[byte_nth_of(buffer_section_a[(index + argument_x[1_ix]) % block_size], 4_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 4_ix))) << 0_sz;
				}
				return;
			}

			inline auto process_section_list (
				CListView<IntegerU32> const & initial_key_section,
				CListView<IntegerU32> const & order_section_list,
				Size const &                  order_section_count,
				CListView<IntegerU32> const & source_data_section_list,
				VListView<IntegerU32> const & dest_data_section_list,
				Size const &                  block_size
			) -> Void {
				auto key_section = Array<IntegerU32>{k_max_block_size};
				auto buffer_section_a = Array<IntegerU32>{k_max_block_size};
				auto buffer_section_b = Array<IntegerU32>{k_max_block_size};
				auto argument_x = CListView<Size>{};
				switch (block_size.value) {
					default : {
						throw NeverException{};
						break;
					}
					case 4_sz .value : {
						argument_x = k_argument_x_16.view();
						break;
					}
					case 6_sz .value : {
						argument_x = k_argument_x_24.view();
						break;
					}
					case 8_sz .value : {
						argument_x = k_argument_x_32.view();
						break;
					}
				}
				Range::assign_from(
					key_section.head(block_size),
					initial_key_section.head(block_size)
				);
				for (auto & index : SizeRange{source_data_section_list.size() / block_size}) {
					process_section(
						key_section,
						order_section_list,
						order_section_count,
						source_data_section_list.sub(block_size * index, block_size),
						dest_data_section_list.sub(block_size * index, block_size),
						block_size,
						argument_x,
						buffer_section_a,
						buffer_section_b
					);
					Range::assign_from(
						key_section.head(block_size),
						dest_data_section_list.sub(block_size * index, block_size)
					);
				}
				return;
			}

			inline auto process_entry (
				CListView<IntegerU32> const & source_data_section_list,
				VListView<IntegerU32> const & dest_data_section_list,
				Size const &                  block_size,
				Size const &                  key_size,
				String const &                key,
				String const &                iv
			) -> Void {
				auto order_section_count = k_order_section_count_base_value + max(block_size, key_size);
				auto order_section_list_a = Array<IntegerU32>{block_size * order_section_count};
				auto order_section_list_b = Array<IntegerU32>{block_size * order_section_count};
				make_order_section_list(
					CListView<IntegerU32>{cast_pointer<IntegerU32>(key.begin()), bs_size(key) / bs_static_size<IntegerU32>()},
					key_size,
					order_section_list_a,
					order_section_list_b,
					block_size,
					order_section_count
				);
				process_section_list(
					CListView<IntegerU32>{cast_pointer<IntegerU32>(iv.begin()), bs_size(iv) / bs_static_size<IntegerU32>()},
					order_section_list_a,
					order_section_count,
					source_data_section_list,
					dest_data_section_list,
					block_size
				);
				return;
			}

			// ----------------

			inline auto process (
				IStreamView<IntegerU32> & plain,
				OStreamView<IntegerU32> & cipher,
				Size const &              block_size,
				Size const &              key_size,
				String const &            key,
				String const &            iv
			) -> Void {
				assert_condition(is_padded_size(plain.reserve(), block_size));
				assert_condition(Range::has(k_valid_block_size, block_size));
				assert_condition(Range::has(k_valid_block_size, key_size));
				assert_condition(is_padded_size(bs_size(key), bs_static_size<IntegerU32>()));
				assert_condition(is_padded_size(bs_size(iv), bs_static_size<IntegerU32>()));
				auto plain_size = plain.reserve();
				process_entry(plain.forward_view(plain_size), cipher.forward_view(plain_size), block_size, key_size, key, iv);
				return;
			}

			#pragma endregion

		}

		using Detail::process;

	}

	namespace Decrypt {

		namespace Detail {

			#pragma region using

			using namespace Common::Detail;

			#pragma endregion

			#pragma region parameter

			inline constexpr auto k_argument_x_16 = StaticArray<Size, 4_szz>{{1_ix, 4_ix, 3_ix, 2_ix}};

			inline constexpr auto k_argument_x_24 = StaticArray<Size, 4_szz>{{1_ix, 6_ix, 5_ix, 4_ix}};

			inline constexpr auto k_argument_x_32 = StaticArray<Size, 4_szz>{{1_ix, 8_ix, 6_ix, 5_ix}};

			#pragma endregion

			#pragma region process

			inline auto process_section (
				CListView<IntegerU32> const & key_section,
				CListView<IntegerU32> const & order_section_list,
				Size const &                  order_section_count,
				CListView<IntegerU32> const & source_data_section,
				VListView<IntegerU32> const & dest_data_section,
				Size const &                  block_size,
				CListView<Size> const &       argument_x,
				Array<IntegerU32> &           buffer_section_a,
				Array<IntegerU32> &           buffer_section_b
			) -> Void {
				for (auto & index : SizeRange{block_size}) {
					buffer_section_a[index] = reverse_endian(source_data_section[index]) ^ order_section_list[index];
				}
				for (auto & block_index : SizeRange{2_ix, order_section_count - 2_ix}) {
					for (auto & index : SizeRange{block_size}) {
						buffer_section_b[index] =
							order_section_list[block_size * block_index + index] ^
							k_box_32_c[2_ixz][byte_nth_of(buffer_section_a[(index + argument_x[4_ix]) % block_size], 1_ix).value] ^
							k_box_32_c[4_ixz][byte_nth_of(buffer_section_a[(index + argument_x[3_ix]) % block_size], 2_ix).value] ^
							k_box_32_c[3_ixz][byte_nth_of(buffer_section_a[(index + argument_x[2_ix]) % block_size], 3_ix).value] ^
							k_box_32_c[1_ixz][byte_nth_of(buffer_section_a[(index + argument_x[1_ix]) % block_size], 4_ix).value];
					}
					Range::assign_from(
						buffer_section_a.head(block_size),
						buffer_section_b.head(block_size)
					);
				}
				for (auto & index : SizeRange{block_size}) {
					dest_data_section[index] =
						(cbw<IntegerU32>(k_box_8_c[byte_nth_of(buffer_section_a[(index + argument_x[4_ix]) % block_size], 1_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 1_ix))) << 24_sz |
						(cbw<IntegerU32>(k_box_8_c[byte_nth_of(buffer_section_a[(index + argument_x[3_ix]) % block_size], 2_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 2_ix))) << 16_sz |
						(cbw<IntegerU32>(k_box_8_c[byte_nth_of(buffer_section_a[(index + argument_x[2_ix]) % block_size], 3_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 3_ix))) << 8_sz |
						(cbw<IntegerU32>(k_box_8_c[byte_nth_of(buffer_section_a[(index + argument_x[1_ix]) % block_size], 4_ix).value]) ^ cbw<IntegerU32>(byte_nth_of(order_section_list[14_sz * block_size + index], 4_ix))) << 0_sz;
				}
				for (auto & index : SizeRange{block_size}) {
					dest_data_section[index] ^= key_section[index];
				}
				return;
			}

			inline auto process_section_list (
				CListView<IntegerU32> const & initial_key_section,
				CListView<IntegerU32> const & order_section_list,
				Size const &                  order_section_count,
				CListView<IntegerU32> const & source_data_section_list,
				VListView<IntegerU32> const & dest_data_section_list,
				Size const &                  block_size
			) -> Void {
				auto key_section = Array<IntegerU32>{k_max_block_size};
				auto buffer_section_a = Array<IntegerU32>{k_max_block_size};
				auto buffer_section_b = Array<IntegerU32>{k_max_block_size};
				auto argument_x = CListView<Size>{};
				switch (block_size.value) {
					default : {
						throw NeverException{};
						break;
					}
					case 4_sz .value : {
						argument_x = k_argument_x_16.view();
						break;
					}
					case 6_sz .value : {
						argument_x = k_argument_x_24.view();
						break;
					}
					case 8_sz .value : {
						argument_x = k_argument_x_32.view();
						break;
					}
				}
				Range::assign_from(
					key_section.head(block_size),
					initial_key_section.head(block_size)
				);
				for (auto & index : SizeRange{source_data_section_list.size() / block_size}) {
					process_section(
						key_section,
						order_section_list,
						order_section_count,
						source_data_section_list.sub(block_size * index, block_size),
						dest_data_section_list.sub(block_size * index, block_size),
						block_size,
						argument_x,
						buffer_section_a,
						buffer_section_b
					);
					Range::assign_from(
						key_section.head(block_size),
						source_data_section_list.sub(block_size * index, block_size)
					);
				}
				return;
			}

			inline auto process_entry (
				CListView<IntegerU32> const & source_data_section_list,
				VListView<IntegerU32> const & dest_data_section_list,
				Size const &                  block_size,
				Size const &                  key_size,
				String const &                key,
				String const &                iv
			) -> Void {
				auto order_section_count = k_order_section_count_base_value + max(block_size, key_size);
				auto order_section_list_a = Array<IntegerU32>{block_size * order_section_count};
				auto order_section_list_b = Array<IntegerU32>{block_size * order_section_count};
				make_order_section_list(
					CListView<IntegerU32>{cast_pointer<IntegerU32>(key.begin()), bs_size(key) / bs_static_size<IntegerU32>()},
					key_size,
					order_section_list_a,
					order_section_list_b,
					block_size,
					order_section_count
				);
				process_section_list(
					CListView<IntegerU32>{cast_pointer<IntegerU32>(iv.begin()), bs_size(iv) / bs_static_size<IntegerU32>()},
					order_section_list_b,
					order_section_count,
					source_data_section_list,
					dest_data_section_list,
					block_size
				);
				return;
			}

			// ----------------

			inline auto process (
				IStreamView<IntegerU32> & cipher,
				OStreamView<IntegerU32> & plain,
				Size const &              block_size,
				Size const &              key_size,
				String const &            key,
				String const &            iv
			) -> Void {
				assert_condition(is_padded_size(cipher.reserve(), block_size));
				assert_condition(Range::has(k_valid_block_size, block_size));
				assert_condition(Range::has(k_valid_block_size, key_size));
				assert_condition(is_padded_size(bs_size(key), bs_static_size<IntegerU32>()));
				assert_condition(is_padded_size(bs_size(iv), bs_static_size<IntegerU32>()));
				auto cipher_size = cipher.reserve();
				process_entry(cipher.forward_view(cipher_size), plain.forward_view(cipher_size), block_size, key_size, key, iv);
				return;
			}

			#pragma endregion

		}

		using Detail::process;

	}

}
