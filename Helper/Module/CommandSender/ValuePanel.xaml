<UserControl
	x:Class="Helper.Module.CommandSender.ValuePanel"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:community="using:CommunityToolkit.WinUI"
	xmlns:communityControls="using:CommunityToolkit.WinUI.Controls"
	xmlns:local="using:Helper"
	xmlns:localModuleCommandSender="using:Helper.Module.CommandSender"
	xmlns:my="using:Helper.CustomControl"
	mc:Ignorable="d"
	x:DefaultBindMode="OneWay"
>
	<ContentPresenter x:Name="uAction">
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup x:Name="TypeStateGroup">
				<VisualState x:Name="NullState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<Button
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										HorizontalContentAlignment="Left"
										IsEnabled="False"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="BooleanState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<Button
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										HorizontalContentAlignment="Left"
										Click="{x:Bind Controller.uBooleanValue_OnClick}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									>
										<TextBlock Style="{StaticResource BodyTextBlockStyle}" TextWrapping="NoWrap" Text="{x:Bind Controller.uBooleanValue_Text}" />
									</Button>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="IntegerState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<NumberBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										NumberFormatter="{x:Bind Controller.uIntegerValue_NumberFormatter}"
										SmallChange="1" LargeChange="10" SpinButtonPlacementMode="Inline"
										Value="{x:Bind Controller.uIntegerValue_Value}"
										ValueChanged="{x:Bind Controller.uIntegerValue_OnValueChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="FloaterState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<NumberBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										NumberFormatter="{x:Bind Controller.uFloaterValue_NumberFormatter}"
										SmallChange="1.0" LargeChange="10.0" SpinButtonPlacementMode="Inline"
										Value="{x:Bind Controller.uFloaterValue_Value}"
										ValueChanged="{x:Bind Controller.uFloaterValue_OnValueChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="SizeState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<NumberBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										NumberFormatter="{x:Bind Controller.uSizeValue_NumberFormatter}" Minimum="0.0"
										SmallChange="1.0" LargeChange="10.0" SpinButtonPlacementMode="Inline"
										Value="{x:Bind Controller.uSizeValue_Value}"
										ValueChanged="{x:Bind Controller.uSizeValue_OnValueChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
									<ComboBox
										Width="68" Height="NaN"
										VerticalAlignment="Stretch"
										HorizontalContentAlignment="Center"
										ItemsSource="{x:Bind Controller.uSizeUnit_ItemsSource}"
										SelectedItem="{x:Bind Controller.uSizeUnit_SelectedItem}"
										SelectionChanged="{x:Bind Controller.uSizeUnit_OnSelectionChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="StringState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<TextBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										Text="{x:Bind Controller.uStringValue_Text}"
										TextChanged="{x:Bind Controller.uStringValue_OnTextChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="PathState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<TextBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										Text="{x:Bind Controller.uPathValue_Text}"
										TextChanged="{x:Bind Controller.uPathValue_OnTextChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
										AllowDrop="True"
										DragOver="{x:Bind Controller.uPathValue_OnDragOver}"
										Drop="{x:Bind Controller.uPathValue_OnDrop}"
									/>
									<DropDownButton
										Width="68" Height="NaN"
										VerticalAlignment="Stretch"
										HorizontalContentAlignment="Center"
										Content="{community:FontIcon FontSize={StaticResource SmallIconSize}, Glyph={StaticResource FluentIconGlyph.OpenInNewWindow}}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
										Padding="6,0,13,0"
									>
										<DropDownButton.Flyout>
											<MenuFlyout Placement="BottomEdgeAlignedRight">
												<MenuFlyoutItem Text="File" Icon="{community:FontIcon Glyph={StaticResource FluentIconGlyph.Document}}" Click="{x:Bind Controller.uPathPickFile_OnClick}" />
												<MenuFlyoutItem Text="Directory" Icon="{community:FontIcon Glyph={StaticResource FluentIconGlyph.Folder}}" Click="{x:Bind Controller.uPathPickDirectory_OnClick}" />
											</MenuFlyout>
										</DropDownButton.Flyout>
									</DropDownButton>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="EnumerationState">
					<VisualState.Setters>
						<Setter Target="uAction.Content">
							<Setter.Value>
								<my:MStack Padding="0,0" Orientation="Horizontal" Spacing="8">
									<ComboBox
										my:MStack.Weight="1" HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										HorizontalContentAlignment="Left"
										ItemsSource="{x:Bind Controller.uEnumerationValue_ItemsSource}"
										SelectedValuePath="Item1" DisplayMemberPath="Item2"
										SelectedValue="{x:Bind Controller.uEnumerationValue_SelectedValue}"
										SelectionChanged="{x:Bind Controller.uEnumerationValue_OnSelectionChanged}"
										IsEnabled="{x:Bind Controller.uAction_IsEnabled}"
									/>
								</my:MStack>
							</Setter.Value>
						</Setter>
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>
	</ContentPresenter>
</UserControl>
